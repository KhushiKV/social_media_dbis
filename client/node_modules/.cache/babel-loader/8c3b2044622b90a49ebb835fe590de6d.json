{"ast":null,"code":"/* eslint-disable class-methods-use-this */\nconst CACHE = Symbol.for(\"com.cloudinary.cache\");\nconst CACHE_ADAPTER = Symbol.for(\"com.cloudinary.cacheAdapter\");\n\nconst {\n  ensurePresenceOf,\n  generate_transformation_string\n} = require('./utils');\n/**\n * The adapter used to communicate with the underlying cache storage\n */\n\n\nclass CacheAdapter {\n  /**\n   * Get a value from the cache\n   * @param {string} publicId\n   * @param {string} type\n   * @param {string} resourceType\n   * @param {string} transformation\n   * @param {string} format\n   * @return {*} the value associated with the provided arguments\n   */\n  get(publicId, type, resourceType, transformation, format) {}\n  /**\n   * Set a new value in the cache\n   * @param {string} publicId\n   * @param {string} type\n   * @param {string} resourceType\n   * @param {string} transformation\n   * @param {string} format\n   * @param {*} value\n   */\n\n\n  set(publicId, type, resourceType, transformation, format, value) {}\n  /**\n   * Delete all values in the cache\n   */\n\n\n  flushAll() {}\n\n}\n/**\n * @class Cache\n * Stores and retrieves values identified by publicId / options pairs\n */\n\n\nconst Cache = {\n  /**\n   * The adapter interface. Extend this class to implement a specific adapter.\n   * @type CacheAdapter\n   */\n  CacheAdapter,\n\n  /**\n   * Set the cache adapter\n   * @param {CacheAdapter} adapter The cache adapter\n   */\n  setAdapter(adapter) {\n    if (this.adapter) {\n      console.warn(\"Overriding existing cache adapter\");\n    }\n\n    this.adapter = adapter;\n  },\n\n  /**\n   * Get the adapter the Cache is using\n   * @return {CacheAdapter} the current cache adapter\n   */\n  getAdapter() {\n    return this.adapter;\n  },\n\n  /**\n   * Get an item from the cache\n   * @param {string} publicId\n   * @param {object} options\n   * @return {*}\n   */\n  get(publicId, options) {\n    if (!this.adapter) {\n      return undefined;\n    }\n\n    ensurePresenceOf({\n      publicId\n    });\n    let transformation = generate_transformation_string({ ...options\n    });\n    return this.adapter.get(publicId, options.type || 'upload', options.resource_type || 'image', transformation, options.format);\n  },\n\n  /**\n   * Set a new value in the cache\n   * @param {string} publicId\n   * @param {object} options\n   * @param {*} value\n   * @return {*}\n   */\n  set(publicId, options, value) {\n    if (!this.adapter) {\n      return undefined;\n    }\n\n    ensurePresenceOf({\n      publicId,\n      value\n    });\n    let transformation = generate_transformation_string({ ...options\n    });\n    return this.adapter.set(publicId, options.type || 'upload', options.resource_type || 'image', transformation, options.format, value);\n  },\n\n  /**\n   * Clear all items in the cache\n   * @return {*} Returns the value from the adapter's flushAll() method\n   */\n  flushAll() {\n    if (!this.adapter) {\n      return undefined;\n    }\n\n    return this.adapter.flushAll();\n  }\n\n}; // Define singleton property\n\nObject.defineProperty(Cache, \"instance\", {\n  get() {\n    return global[CACHE];\n  }\n\n});\nObject.defineProperty(Cache, \"adapter\", {\n  /**\n   *\n   * @return {CacheAdapter} The current cache adapter\n   */\n  get() {\n    return global[CACHE_ADAPTER];\n  },\n\n  /**\n   * Set the cache adapter to be used by Cache\n   * @param {CacheAdapter} adapter Cache adapter\n   */\n  set(adapter) {\n    global[CACHE_ADAPTER] = adapter;\n  }\n\n});\nObject.freeze(Cache); // Instantiate the singleton\n\nlet symbols = Object.getOwnPropertySymbols(global);\n\nif (symbols.indexOf(CACHE) < 0) {\n  global[CACHE] = Cache;\n}\n/**\n * Store key value pairs\n\n */\n\n\nmodule.exports = Cache;","map":{"version":3,"names":["CACHE","Symbol","for","CACHE_ADAPTER","ensurePresenceOf","generate_transformation_string","require","CacheAdapter","get","publicId","type","resourceType","transformation","format","set","value","flushAll","Cache","setAdapter","adapter","console","warn","getAdapter","options","undefined","resource_type","Object","defineProperty","global","freeze","symbols","getOwnPropertySymbols","indexOf","module","exports"],"sources":["/Users/abhinavkumar/Desktop/dbms/client/node_modules/cloudinary/lib/cache.js"],"sourcesContent":["/* eslint-disable class-methods-use-this */\n\nconst CACHE = Symbol.for(\"com.cloudinary.cache\");\nconst CACHE_ADAPTER = Symbol.for(\"com.cloudinary.cacheAdapter\");\nconst { ensurePresenceOf, generate_transformation_string } = require('./utils');\n\n/**\n * The adapter used to communicate with the underlying cache storage\n */\nclass CacheAdapter {\n  /**\n   * Get a value from the cache\n   * @param {string} publicId\n   * @param {string} type\n   * @param {string} resourceType\n   * @param {string} transformation\n   * @param {string} format\n   * @return {*} the value associated with the provided arguments\n   */\n  get(publicId, type, resourceType, transformation, format) {}\n\n  /**\n   * Set a new value in the cache\n   * @param {string} publicId\n   * @param {string} type\n   * @param {string} resourceType\n   * @param {string} transformation\n   * @param {string} format\n   * @param {*} value\n   */\n  set(publicId, type, resourceType, transformation, format, value) {}\n\n  /**\n   * Delete all values in the cache\n   */\n  flushAll() {}\n}\n/**\n * @class Cache\n * Stores and retrieves values identified by publicId / options pairs\n */\nconst Cache = {\n  /**\n   * The adapter interface. Extend this class to implement a specific adapter.\n   * @type CacheAdapter\n   */\n  CacheAdapter,\n  /**\n   * Set the cache adapter\n   * @param {CacheAdapter} adapter The cache adapter\n   */\n  setAdapter(adapter) {\n    if (this.adapter) {\n      console.warn(\"Overriding existing cache adapter\");\n    }\n    this.adapter = adapter;\n  },\n  /**\n   * Get the adapter the Cache is using\n   * @return {CacheAdapter} the current cache adapter\n   */\n  getAdapter() {\n    return this.adapter;\n  },\n  /**\n   * Get an item from the cache\n   * @param {string} publicId\n   * @param {object} options\n   * @return {*}\n   */\n  get(publicId, options) {\n    if (!this.adapter) { return undefined; }\n    ensurePresenceOf({ publicId });\n    let transformation = generate_transformation_string({ ...options });\n    return this.adapter.get(\n      publicId, options.type || 'upload',\n      options.resource_type || 'image',\n      transformation,\n      options.format\n    );\n  },\n  /**\n   * Set a new value in the cache\n   * @param {string} publicId\n   * @param {object} options\n   * @param {*} value\n   * @return {*}\n   */\n  set(publicId, options, value) {\n    if (!this.adapter) { return undefined; }\n    ensurePresenceOf({ publicId, value });\n    let transformation = generate_transformation_string({ ...options });\n    return this.adapter.set(\n      publicId,\n      options.type || 'upload',\n      options.resource_type || 'image',\n      transformation,\n      options.format,\n      value\n    );\n  },\n  /**\n   * Clear all items in the cache\n   * @return {*} Returns the value from the adapter's flushAll() method\n   */\n  flushAll() {\n    if (!this.adapter) { return undefined; }\n    return this.adapter.flushAll();\n  }\n\n};\n\n// Define singleton property\nObject.defineProperty(Cache, \"instance\", {\n  get() {\n    return global[CACHE];\n  }\n});\nObject.defineProperty(Cache, \"adapter\", {\n  /**\n   *\n   * @return {CacheAdapter} The current cache adapter\n   */\n  get() {\n    return global[CACHE_ADAPTER];\n  },\n  /**\n   * Set the cache adapter to be used by Cache\n   * @param {CacheAdapter} adapter Cache adapter\n   */\n  set(adapter) {\n    global[CACHE_ADAPTER] = adapter;\n  }\n});\nObject.freeze(Cache);\n\n// Instantiate the singleton\nlet symbols = Object.getOwnPropertySymbols(global);\nif (symbols.indexOf(CACHE) < 0) {\n  global[CACHE] = Cache;\n}\n\n/**\n * Store key value pairs\n\n */\nmodule.exports = Cache;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}