{"ast":null,"code":"'use strict';\n\nvar utils = require('./index');\n\nvar generateBreakpoints = require('./generateBreakpoints');\n\nvar Cache = require('../cache');\n\nvar isEmpty = utils.isEmpty;\n/**\n * Options used to generate the srcset attribute.\n * @typedef {object} srcset\n * @property {(number[]|string[])}   [breakpoints] An array of breakpoints.\n * @property {number}                [min_width]   Minimal width of the srcset images.\n * @property {number}                [max_width]   Maximal width of the srcset images.\n * @property {number}                [max_images]  Number of srcset images to generate.\n * @property {object|string}         [transformation] The transformation to use in the srcset urls.\n * @property {boolean}               [sizes] Whether to calculate and add the sizes attribute.\n */\n\n/**\n * Helper function. Generates a single srcset item url\n *\n * @private\n * @param {string} public_id  Public ID of the resource.\n * @param {number} width      Width in pixels of the srcset item.\n * @param {object|string} transformation\n * @param {object} options    Additional options.\n *\n * @return {string} Resulting URL of the item\n */\n\nfunction scaledUrl(public_id, width, transformation) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var configParams = utils.extractUrlParams(options);\n  transformation = transformation || options;\n  configParams.raw_transformation = utils.generate_transformation_string([utils.extend({}, transformation), {\n    crop: 'scale',\n    width: width\n  }]);\n  return utils.url(public_id, configParams);\n}\n/**\n * If cache is enabled, get the breakpoints from the cache. If the values were not found in the cache,\n * or cache is not enabled, generate the values.\n * @param {srcset} srcset The srcset configuration parameters\n * @param {string} public_id\n * @param {object} options\n * @return {*|Array}\n */\n\n\nfunction getOrGenerateBreakpoints(public_id) {\n  var srcset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var breakpoints = [];\n\n  if (srcset.useCache) {\n    breakpoints = Cache.get(public_id, options);\n\n    if (!breakpoints) {\n      breakpoints = [];\n    }\n  } else {\n    breakpoints = generateBreakpoints(srcset);\n  }\n\n  return breakpoints;\n}\n/**\n * Helper function. Generates srcset attribute value of the HTML img tag\n * @private\n *\n * @param {string} public_id  Public ID of the resource\n * @param {number[]} breakpoints An array of breakpoints (in pixels)\n * @param {object} transformation The transformation\n * @param {object} options Includes html tag options, transformation options\n * @return {string} Resulting srcset attribute value\n */\n\n\nfunction generateSrcsetAttribute(public_id, breakpoints, transformation, options) {\n  options = utils.clone(options);\n  utils.patchFetchFormat(options);\n  return breakpoints.map(function (width) {\n    return `${scaledUrl(public_id, width, transformation, options)} ${width}w`;\n  }).join(', ');\n}\n/**\n * Helper function. Generates sizes attribute value of the HTML img tag\n * @private\n * @param {number[]} breakpoints An array of breakpoints.\n * @return {string} Resulting sizes attribute value\n */\n\n\nfunction generateSizesAttribute() {\n  var breakpoints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return breakpoints.map(function (width) {\n    return `(max-width: ${width}px) ${width}px`;\n  }).join(', ');\n}\n/**\n * Helper function. Generates srcset and sizes attributes of the image tag\n *\n * Generated attributes are added to attributes argument\n *\n * @private\n * @param {string}    publicId  The public ID of the resource\n * @param {object}    attributes Existing HTML attributes.\n * @param {srcset}    srcsetData\n * @param {object}    options    Additional options.\n *\n * @return array The responsive attributes\n */\n\n\nfunction generateImageResponsiveAttributes(publicId) {\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var srcsetData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {}; // Create both srcset and sizes here to avoid fetching breakpoints twice\n\n  var responsiveAttributes = {};\n\n  if (isEmpty(srcsetData)) {\n    return responsiveAttributes;\n  }\n\n  var generateSizes = !attributes.sizes && srcsetData.sizes === true;\n  var generateSrcset = !attributes.srcset;\n\n  if (generateSrcset || generateSizes) {\n    var breakpoints = getOrGenerateBreakpoints(publicId, srcsetData, options);\n\n    if (generateSrcset) {\n      var transformation = srcsetData.transformation;\n      var srcsetAttr = generateSrcsetAttribute(publicId, breakpoints, transformation, options);\n\n      if (!isEmpty(srcsetAttr)) {\n        responsiveAttributes.srcset = srcsetAttr;\n      }\n    }\n\n    if (generateSizes) {\n      var sizesAttr = generateSizesAttribute(breakpoints);\n\n      if (!isEmpty(sizesAttr)) {\n        responsiveAttributes.sizes = sizesAttr;\n      }\n    }\n  }\n\n  return responsiveAttributes;\n}\n/**\n * Generate a media query\n *\n * @private\n * @param {object} options configuration options\n * @param {number|string} options.min_width\n * @param {number|string} options.max_width\n * @return {string} a media query string\n */\n\n\nfunction generateMediaAttr() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var mediaQuery = [];\n\n  if (options.min_width != null) {\n    mediaQuery.push(`(min-width: ${options.min_width}px)`);\n  }\n\n  if (options.max_width != null) {\n    mediaQuery.push(`(max-width: ${options.max_width}px)`);\n  }\n\n  return mediaQuery.join(' and ');\n}\n\nmodule.exports = {\n  srcsetUrl: scaledUrl,\n  generateSrcsetAttribute,\n  generateSizesAttribute,\n  generateMediaAttr,\n  generateImageResponsiveAttributes\n};","map":{"version":3,"names":["utils","require","generateBreakpoints","Cache","isEmpty","scaledUrl","public_id","width","transformation","options","arguments","length","undefined","configParams","extractUrlParams","raw_transformation","generate_transformation_string","extend","crop","url","getOrGenerateBreakpoints","srcset","breakpoints","useCache","get","generateSrcsetAttribute","clone","patchFetchFormat","map","join","generateSizesAttribute","generateImageResponsiveAttributes","publicId","attributes","srcsetData","responsiveAttributes","generateSizes","sizes","generateSrcset","srcsetAttr","sizesAttr","generateMediaAttr","mediaQuery","min_width","push","max_width","module","exports","srcsetUrl"],"sources":["/Users/abhinavkumar/Desktop/dbms/client/node_modules/cloudinary/lib-es5/utils/srcsetUtils.js"],"sourcesContent":["'use strict';\n\nvar utils = require('./index');\nvar generateBreakpoints = require('./generateBreakpoints');\nvar Cache = require('../cache');\n\nvar isEmpty = utils.isEmpty;\n\n/**\n * Options used to generate the srcset attribute.\n * @typedef {object} srcset\n * @property {(number[]|string[])}   [breakpoints] An array of breakpoints.\n * @property {number}                [min_width]   Minimal width of the srcset images.\n * @property {number}                [max_width]   Maximal width of the srcset images.\n * @property {number}                [max_images]  Number of srcset images to generate.\n * @property {object|string}         [transformation] The transformation to use in the srcset urls.\n * @property {boolean}               [sizes] Whether to calculate and add the sizes attribute.\n */\n\n/**\n * Helper function. Generates a single srcset item url\n *\n * @private\n * @param {string} public_id  Public ID of the resource.\n * @param {number} width      Width in pixels of the srcset item.\n * @param {object|string} transformation\n * @param {object} options    Additional options.\n *\n * @return {string} Resulting URL of the item\n */\nfunction scaledUrl(public_id, width, transformation) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  var configParams = utils.extractUrlParams(options);\n  transformation = transformation || options;\n  configParams.raw_transformation = utils.generate_transformation_string([utils.extend({}, transformation), { crop: 'scale', width: width }]);\n\n  return utils.url(public_id, configParams);\n}\n\n/**\n * If cache is enabled, get the breakpoints from the cache. If the values were not found in the cache,\n * or cache is not enabled, generate the values.\n * @param {srcset} srcset The srcset configuration parameters\n * @param {string} public_id\n * @param {object} options\n * @return {*|Array}\n */\nfunction getOrGenerateBreakpoints(public_id) {\n  var srcset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var breakpoints = [];\n  if (srcset.useCache) {\n    breakpoints = Cache.get(public_id, options);\n    if (!breakpoints) {\n      breakpoints = [];\n    }\n  } else {\n    breakpoints = generateBreakpoints(srcset);\n  }\n  return breakpoints;\n}\n\n/**\n * Helper function. Generates srcset attribute value of the HTML img tag\n * @private\n *\n * @param {string} public_id  Public ID of the resource\n * @param {number[]} breakpoints An array of breakpoints (in pixels)\n * @param {object} transformation The transformation\n * @param {object} options Includes html tag options, transformation options\n * @return {string} Resulting srcset attribute value\n */\nfunction generateSrcsetAttribute(public_id, breakpoints, transformation, options) {\n  options = utils.clone(options);\n  utils.patchFetchFormat(options);\n  return breakpoints.map(function (width) {\n    return `${scaledUrl(public_id, width, transformation, options)} ${width}w`;\n  }).join(', ');\n}\n\n/**\n * Helper function. Generates sizes attribute value of the HTML img tag\n * @private\n * @param {number[]} breakpoints An array of breakpoints.\n * @return {string} Resulting sizes attribute value\n */\nfunction generateSizesAttribute() {\n  var breakpoints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  return breakpoints.map(function (width) {\n    return `(max-width: ${width}px) ${width}px`;\n  }).join(', ');\n}\n\n/**\n * Helper function. Generates srcset and sizes attributes of the image tag\n *\n * Generated attributes are added to attributes argument\n *\n * @private\n * @param {string}    publicId  The public ID of the resource\n * @param {object}    attributes Existing HTML attributes.\n * @param {srcset}    srcsetData\n * @param {object}    options    Additional options.\n *\n * @return array The responsive attributes\n */\nfunction generateImageResponsiveAttributes(publicId) {\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var srcsetData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  // Create both srcset and sizes here to avoid fetching breakpoints twice\n\n  var responsiveAttributes = {};\n  if (isEmpty(srcsetData)) {\n    return responsiveAttributes;\n  }\n\n  var generateSizes = !attributes.sizes && srcsetData.sizes === true;\n\n  var generateSrcset = !attributes.srcset;\n  if (generateSrcset || generateSizes) {\n    var breakpoints = getOrGenerateBreakpoints(publicId, srcsetData, options);\n\n    if (generateSrcset) {\n      var transformation = srcsetData.transformation;\n      var srcsetAttr = generateSrcsetAttribute(publicId, breakpoints, transformation, options);\n      if (!isEmpty(srcsetAttr)) {\n        responsiveAttributes.srcset = srcsetAttr;\n      }\n    }\n\n    if (generateSizes) {\n      var sizesAttr = generateSizesAttribute(breakpoints);\n      if (!isEmpty(sizesAttr)) {\n        responsiveAttributes.sizes = sizesAttr;\n      }\n    }\n  }\n  return responsiveAttributes;\n}\n\n/**\n * Generate a media query\n *\n * @private\n * @param {object} options configuration options\n * @param {number|string} options.min_width\n * @param {number|string} options.max_width\n * @return {string} a media query string\n */\nfunction generateMediaAttr() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var mediaQuery = [];\n  if (options.min_width != null) {\n    mediaQuery.push(`(min-width: ${options.min_width}px)`);\n  }\n  if (options.max_width != null) {\n    mediaQuery.push(`(max-width: ${options.max_width}px)`);\n  }\n  return mediaQuery.join(' and ');\n}\n\nmodule.exports = {\n  srcsetUrl: scaledUrl,\n  generateSrcsetAttribute,\n  generateSizesAttribute,\n  generateMediaAttr,\n  generateImageResponsiveAttributes\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}