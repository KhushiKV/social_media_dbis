{"ast":null,"code":"/**\n * Utilities\n * @module utils\n * @borrows module:auth_token as generate_auth_token\n */\nconst crypto = require(\"crypto\");\n\nconst querystring = require(\"querystring\");\n\nconst urlParse = require(\"url\").parse; // Functions used internally\n\n\nconst compact = require(\"lodash/compact\");\n\nconst first = require(\"lodash/first\");\n\nconst isFunction = require(\"lodash/isFunction\");\n\nconst isPlainObject = require(\"lodash/isPlainObject\");\n\nconst last = require(\"lodash/last\");\n\nconst map = require(\"lodash/map\");\n\nconst take = require(\"lodash/take\");\n\nconst at = require(\"lodash/at\"); // Exposed by the module\n\n\nconst clone = require(\"lodash/clone\");\n\nconst extend = require(\"lodash/extend\");\n\nconst filter = require(\"lodash/filter\");\n\nconst includes = require(\"lodash/includes\");\n\nconst isArray = require(\"lodash/isArray\");\n\nconst isEmpty = require(\"lodash/isEmpty\");\n\nconst isNumber = require(\"lodash/isNumber\");\n\nconst isObject = require(\"lodash/isObject\");\n\nconst isString = require(\"lodash/isString\");\n\nconst isUndefined = require(\"lodash/isUndefined\");\n\nconst smart_escape = require(\"./encoding/smart_escape\");\n\nconst consumeOption = require('./parsing/consumeOption');\n\nconst toArray = require('./parsing/toArray');\n\nlet {\n  base64EncodeURL\n} = require('./encoding/base64EncodeURL');\n\nconst encodeDoubleArray = require('./encoding/encodeDoubleArray');\n\nconst config = require(\"../config\");\n\nconst generate_token = require(\"../auth_token\");\n\nconst utf8_encode = require('./utf8_encode');\n\nconst crc32 = require('./crc32');\n\nconst ensurePresenceOf = require('./ensurePresenceOf');\n\nconst ensureOption = require('./ensureOption').defaults(config());\n\nconst entries = require('./entries');\n\nconst isRemoteUrl = require('./isRemoteUrl');\n\nconst getSDKVersions = require('./encoding/sdkAnalytics/getSDKVersions');\n\nconst {\n  getAnalyticsOptions,\n  getSDKAnalyticsSignature\n} = require('cloudinary-core').Util;\n\nexports = module.exports;\nconst utils = module.exports;\n\ntry {\n  // eslint-disable-next-line global-require\n  utils.VERSION = require('../../package.json').version;\n} catch (error) {\n  utils.VERSION = '';\n}\n\nfunction generate_auth_token(options) {\n  let token_options = Object.assign({}, config().auth_token, options);\n  return generate_token(token_options);\n}\n\nexports.CF_SHARED_CDN = \"d3jpl91pxevbkh.cloudfront.net\";\nexports.OLD_AKAMAI_SHARED_CDN = \"cloudinary-a.akamaihd.net\";\nexports.AKAMAI_SHARED_CDN = \"res.cloudinary.com\";\nexports.SHARED_CDN = exports.AKAMAI_SHARED_CDN;\nexports.USER_AGENT = `CloudinaryNodeJS/${exports.VERSION} (Node ${process.versions.node})`; // Add platform information to the USER_AGENT header\n// This is intended for platform information and not individual applications!\n\nexports.userPlatform = \"\";\n\nfunction getUserAgent() {\n  return isEmpty(utils.userPlatform) ? `${utils.USER_AGENT}` : `${utils.userPlatform} ${utils.USER_AGENT}`;\n}\n\nconst {\n  DEFAULT_RESPONSIVE_WIDTH_TRANSFORMATION,\n  DEFAULT_POSTER_OPTIONS,\n  DEFAULT_VIDEO_SOURCE_TYPES,\n  CONDITIONAL_OPERATORS,\n  PREDEFINED_VARS,\n  LAYER_KEYWORD_PARAMS,\n  TRANSFORMATION_PARAMS,\n  SIMPLE_PARAMS,\n  UPLOAD_PREFIX,\n  SUPPORTED_SIGNATURE_ALGORITHMS,\n  DEFAULT_SIGNATURE_ALGORITHM\n} = require('./consts');\n\nfunction textStyle(layer) {\n  let keywords = [];\n  let style = \"\";\n\n  if (!isEmpty(layer.text_style)) {\n    return layer.text_style;\n  }\n\n  Object.keys(LAYER_KEYWORD_PARAMS).forEach(attr => {\n    let default_value = LAYER_KEYWORD_PARAMS[attr];\n    let attr_value = layer[attr] || default_value;\n\n    if (attr_value !== default_value) {\n      keywords.push(attr_value);\n    }\n  });\n  Object.keys(layer).forEach(attr => {\n    if (attr === \"letter_spacing\" || attr === \"line_spacing\") {\n      keywords.push(`${attr}_${layer[attr]}`);\n    }\n\n    if (attr === \"font_hinting\") {\n      keywords.push(`${attr.split(\"_\").pop()}_${layer[attr]}`);\n    }\n\n    if (attr === \"font_antialiasing\") {\n      keywords.push(`antialias_${layer[attr]}`);\n    }\n  });\n\n  if (layer.hasOwnProperty(\"font_size\" || \"font_family\") || !isEmpty(keywords)) {\n    if (!layer.font_size) throw `Must supply font_size for text in overlay/underlay`;\n    if (!layer.font_family) throw `Must supply font_family for text in overlay/underlay`;\n    keywords.unshift(layer.font_size);\n    keywords.unshift(layer.font_family);\n    style = compact(keywords).join(\"_\");\n  }\n\n  return style;\n}\n/**\n * Normalize an expression string, replace \"nice names\" with their coded values and spaces with \"_\"\n * e.g. `width > 0` => `w_lt_0`\n *\n * @param {String} expression An expression to be normalized\n * @return {Object|String} A normalized String of the input value if possible otherwise the value itself\n */\n\n\nfunction normalize_expression(expression) {\n  if (!isString(expression) || expression.length === 0 || expression.match(/^!.+!$/)) {\n    return expression;\n  }\n\n  const operators = \"\\\\|\\\\||>=|<=|&&|!=|>|=|<|/|-|\\\\^|\\\\+|\\\\*\";\n  const operatorsPattern = \"((\" + operators + \")(?=[ _]))\";\n  const operatorsReplaceRE = new RegExp(operatorsPattern, \"g\");\n  expression = expression.replace(operatorsReplaceRE, match => CONDITIONAL_OPERATORS[match]); // Duplicate PREDEFINED_VARS to also include :{var_name} as well as {var_name}\n  // Example:\n  // -- PREDEFINED_VARS = ['foo']\n  // -- predefinedVarsPattern = ':foo|foo'\n  // It is done like this because node 6 does not support regex lookbehind\n\n  const predefinedVarsPattern = \"(\" + Object.keys(PREDEFINED_VARS).map(v => `:${v}|${v}`).join(\"|\") + \")\";\n  const userVariablePattern = '(\\\\$_*[^_ ]+)';\n  const variablesReplaceRE = new RegExp(`${userVariablePattern}|${predefinedVarsPattern}`, \"g\");\n  expression = expression.replace(variablesReplaceRE, match => PREDEFINED_VARS[match] || match);\n  return expression.replace(/[ _]+/g, '_');\n}\n/**\n * Parse custom_function options\n * @private\n * @param {object|*} customFunction a custom function object containing function_type and source values\n * @return {string|*} custom_function transformation string\n */\n\n\nfunction process_custom_function(customFunction) {\n  if (!isObject(customFunction)) {\n    return customFunction;\n  }\n\n  if (customFunction.function_type === \"remote\") {\n    const encodedSource = base64EncodeURL(customFunction.source);\n    return [customFunction.function_type, encodedSource].join(\":\");\n  }\n\n  return [customFunction.function_type, customFunction.source].join(\":\");\n}\n/**\n * Parse custom_pre_function options\n * @private\n * @param {object|*} customPreFunction a custom function object containing function_type and source values\n * @return {string|*} custom_pre_function transformation string\n */\n\n\nfunction process_custom_pre_function(customPreFunction) {\n  let result = process_custom_function(customPreFunction);\n  return utils.isString(result) ? `pre:${result}` : null;\n}\n/**\n * Parse \"if\" parameter\n * Translates the condition if provided.\n * @private\n * @return {string} \"if_\" + ifValue\n */\n\n\nfunction process_if(ifValue) {\n  return ifValue ? \"if_\" + normalize_expression(ifValue) : ifValue;\n}\n/**\n * Parse layer options\n * @private\n * @param {object|*} layer The layer to parse.\n * @return {string} layer transformation string\n */\n\n\nfunction process_layer(layer) {\n  let result = '';\n\n  if (isPlainObject(layer)) {\n    if (layer.resource_type === \"fetch\" || layer.url != null) {\n      result = `fetch:${base64EncodeURL(layer.url)}`;\n    } else {\n      let public_id = layer.public_id;\n      let format = layer.format;\n      let resource_type = layer.resource_type || \"image\";\n      let type = layer.type || \"upload\";\n      let text = layer.text;\n      let style = null;\n      let components = [];\n      const noPublicId = isEmpty(public_id);\n\n      if (!noPublicId) {\n        public_id = public_id.replace(new RegExp(\"/\", 'g'), \":\");\n\n        if (format != null) {\n          public_id = `${public_id}.${format}`;\n        }\n      }\n\n      if (isEmpty(text) && resource_type !== \"text\") {\n        if (noPublicId) {\n          throw \"Must supply public_id for resource_type layer_parameter\";\n        }\n\n        if (resource_type === \"subtitles\") {\n          style = textStyle(layer);\n        }\n      } else {\n        resource_type = \"text\";\n        type = null; // type is ignored for text layers\n\n        style = textStyle(layer);\n\n        if (!isEmpty(text)) {\n          const noStyle = isEmpty(style);\n\n          if (!(noPublicId || noStyle) || noPublicId && noStyle) {\n            throw \"Must supply either style parameters or a public_id when providing text parameter in a text overlay/underlay\";\n          }\n\n          let re = /\\$\\([a-zA-Z]\\w*\\)/g;\n          let start = 0;\n          let textSource = smart_escape(decodeURIComponent(text), /[,\\/]/g);\n          text = \"\";\n\n          for (let res = re.exec(textSource); res; res = re.exec(textSource)) {\n            text += smart_escape(textSource.slice(start, res.index));\n            text += res[0];\n            start = res.index + res[0].length;\n          }\n\n          text += encodeURIComponent(textSource.slice(start));\n        }\n      }\n\n      if (resource_type !== \"image\") {\n        components.push(resource_type);\n      }\n\n      if (type !== \"upload\") {\n        components.push(type);\n      }\n\n      components.push(style);\n      components.push(public_id);\n      components.push(text);\n      result = compact(components).join(\":\");\n    }\n  } else if (/^fetch:.+/.test(layer)) {\n    result = `fetch:${base64EncodeURL(layer.substr(6))}`;\n  } else {\n    result = layer;\n  }\n\n  return result;\n}\n/**\n * Parse radius options\n * @private\n * @param {Array<string|number>|string|number} radius The radius to parse\n * @return {string} radius transformation string\n */\n\n\nfunction process_radius(radius) {\n  if (!radius) {\n    return radius;\n  }\n\n  if (!isArray(radius)) {\n    radius = [radius];\n  }\n\n  if (radius.length === 0 || radius.length > 4) {\n    throw new Error(\"Radius array should contain between 1 and 4 values\");\n  }\n\n  if (radius.findIndex(x => x === null) >= 0) {\n    throw new Error(\"Corner: Cannot be null\");\n  }\n\n  return radius.map(normalize_expression).join(':');\n}\n\nfunction build_multi_and_sprite_params(tagOrOptions, options) {\n  let tag = null;\n\n  if (typeof tagOrOptions === 'string') {\n    tag = tagOrOptions;\n  } else {\n    if (isEmpty(options)) {\n      options = tagOrOptions;\n    } else {\n      throw new Error('First argument must be a tag when additional options are passed');\n    }\n\n    tag = null;\n  }\n\n  if (!options && !tag) {\n    throw new Error('Either tag or urls are required');\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  const urls = options.urls;\n  const transformation = generate_transformation_string(extend({}, options, {\n    fetch_format: options.format\n  }));\n  return {\n    tag,\n    transformation,\n    urls,\n    timestamp: utils.timestamp(),\n    async: options.async,\n    notification_url: options.notification_url\n  };\n}\n\nfunction build_upload_params(options) {\n  let params = {\n    access_mode: options.access_mode,\n    allowed_formats: options.allowed_formats && toArray(options.allowed_formats).join(\",\"),\n    asset_folder: options.asset_folder,\n    async: utils.as_safe_bool(options.async),\n    backup: utils.as_safe_bool(options.backup),\n    callback: options.callback,\n    cinemagraph_analysis: utils.as_safe_bool(options.cinemagraph_analysis),\n    colors: utils.as_safe_bool(options.colors),\n    display_name: options.display_name,\n    discard_original_filename: utils.as_safe_bool(options.discard_original_filename),\n    eager: utils.build_eager(options.eager),\n    eager_async: utils.as_safe_bool(options.eager_async),\n    eager_notification_url: options.eager_notification_url,\n    eval: options.eval,\n    exif: utils.as_safe_bool(options.exif),\n    faces: utils.as_safe_bool(options.faces),\n    folder: options.folder,\n    format: options.format,\n    filename_override: options.filename_override,\n    image_metadata: utils.as_safe_bool(options.image_metadata),\n    invalidate: utils.as_safe_bool(options.invalidate),\n    moderation: options.moderation,\n    notification_url: options.notification_url,\n    overwrite: utils.as_safe_bool(options.overwrite),\n    phash: utils.as_safe_bool(options.phash),\n    proxy: options.proxy,\n    public_id: options.public_id,\n    public_id_prefix: options.public_id_prefix,\n    quality_analysis: utils.as_safe_bool(options.quality_analysis),\n    responsive_breakpoints: utils.generate_responsive_breakpoints_string(options.responsive_breakpoints),\n    return_delete_token: utils.as_safe_bool(options.return_delete_token),\n    timestamp: options.timestamp || exports.timestamp(),\n    transformation: utils.generate_transformation_string(clone(options)),\n    type: options.type,\n    unique_filename: utils.as_safe_bool(options.unique_filename),\n    upload_preset: options.upload_preset,\n    use_filename: utils.as_safe_bool(options.use_filename),\n    use_filename_as_display_name: utils.as_safe_bool(options.use_filename_as_display_name),\n    quality_override: options.quality_override,\n    accessibility_analysis: utils.as_safe_bool(options.accessibility_analysis),\n    use_asset_folder_as_public_id_prefix: utils.as_safe_bool(options.use_asset_folder_as_public_id_prefix)\n  };\n  return utils.updateable_resource_params(options, params);\n}\n\nfunction encode_key_value(arg) {\n  if (!isObject(arg)) {\n    return arg;\n  }\n\n  return entries(arg).map(_ref => {\n    let [k, v] = _ref;\n    return `${k}=${v}`;\n  }).join('|');\n}\n/**\n * @description Escape = and | with two backslashes \\\\\n * @param {string|number} value\n * @return {string}\n */\n\n\nfunction escapeMetadataValue(value) {\n  return value.toString().replace(/([=|])/g, '\\\\$&');\n}\n/**\n *\n * @description Encode metadata fields based on incoming value.\n *              If array, escape as color_id=[\\\"green\\\",\\\"red\\\"]\n *              If string/number, escape as in_stock_id=50\n *\n *              Joins resulting values with a pipe:\n *              in_stock_id=50|color_id=[\\\"green\\\",\\\"red\\\"]\n *\n *              = and | and escaped by default (this can't be turned off)\n *\n * @param metadataObj\n * @return {string}\n */\n\n\nfunction encode_context(metadataObj) {\n  if (!isObject(metadataObj)) {\n    return metadataObj;\n  }\n\n  return entries(metadataObj).map(_ref2 => {\n    let [key, value] = _ref2;\n\n    // if string, simply parse the value and move on\n    if (isString(value)) {\n      return `${key}=${escapeMetadataValue(value)}`; // If array, parse each item individually\n    } else if (isArray(value)) {\n      let values = value.map(innerVal => {\n        return `\\\"${escapeMetadataValue(innerVal)}\\\"`;\n      }).join(',');\n      return `${key}=[${values}]`; // if unknown, return the value as string\n    } else {\n      return value.toString();\n    }\n  }).join('|');\n}\n\nfunction build_eager(transformations) {\n  return toArray(transformations).map(transformation => {\n    const transformationString = utils.generate_transformation_string(clone(transformation));\n    const format = transformation.format;\n    return format == null ? transformationString : `${transformationString}/${format}`;\n  }).join('|');\n}\n/**\n * Build the custom headers for the request\n * @private\n * @param headers\n * @return {Array<string>|object|string} An object of name and value,\n *         an array of header strings, or a string of headers\n */\n\n\nfunction build_custom_headers(headers) {\n  switch (true) {\n    case headers == null:\n      return void 0;\n\n    case isArray(headers):\n      return headers.join(\"\\n\");\n\n    case isObject(headers):\n      return entries(headers).map(_ref3 => {\n        let [k, v] = _ref3;\n        return `${k}:${v}`;\n      }).join(\"\\n\");\n\n    default:\n      return headers;\n  }\n}\n\nfunction generate_transformation_string(options) {\n  if (utils.isString(options)) {\n    return options;\n  }\n\n  if (isArray(options)) {\n    return options.map(t => utils.generate_transformation_string(clone(t))).filter(utils.present).join('/');\n  }\n\n  let responsive_width = consumeOption(options, \"responsive_width\", config().responsive_width);\n  let width = options.width;\n  let height = options.height;\n  let size = consumeOption(options, \"size\");\n\n  if (size) {\n    [width, height] = size.split(\"x\");\n    [options.width, options.height] = [width, height];\n  }\n\n  let has_layer = options.overlay || options.underlay;\n  let crop = consumeOption(options, \"crop\");\n  let angle = toArray(consumeOption(options, \"angle\")).join(\".\");\n  let no_html_sizes = has_layer || utils.present(angle) || crop === \"fit\" || crop === \"limit\" || responsive_width;\n\n  if (width && (width.toString().indexOf(\"auto\") === 0 || no_html_sizes || parseFloat(width) < 1)) {\n    delete options.width;\n  }\n\n  if (height && (no_html_sizes || parseFloat(height) < 1)) {\n    delete options.height;\n  }\n\n  let background = consumeOption(options, \"background\");\n  background = background && background.replace(/^#/, \"rgb:\");\n  let color = consumeOption(options, \"color\");\n  color = color && color.replace(/^#/, \"rgb:\");\n  let base_transformations = toArray(consumeOption(options, \"transformation\", []));\n  let named_transformation = [];\n\n  if (base_transformations.some(isObject)) {\n    base_transformations = base_transformations.map(tr => utils.generate_transformation_string(isObject(tr) ? clone(tr) : {\n      transformation: tr\n    }));\n  } else {\n    named_transformation = base_transformations.join(\".\");\n    base_transformations = [];\n  }\n\n  let effect = consumeOption(options, \"effect\");\n\n  if (isArray(effect)) {\n    effect = effect.join(\":\");\n  } else if (isObject(effect)) {\n    effect = entries(effect).map(_ref4 => {\n      let [key, value] = _ref4;\n      return `${key}:${value}`;\n    });\n  }\n\n  let border = consumeOption(options, \"border\");\n\n  if (isObject(border)) {\n    border = `${border.width != null ? border.width : 2}px_solid_${(border.color != null ? border.color : \"black\").replace(/^#/, 'rgb:')}`;\n  } else if (/^\\d+$/.exec(border)) {\n    // fallback to html border attributes\n    options.border = border;\n    border = void 0;\n  }\n\n  let flags = toArray(consumeOption(options, \"flags\")).join(\".\");\n  let dpr = consumeOption(options, \"dpr\", config().dpr);\n\n  if (options.offset != null) {\n    [options.start_offset, options.end_offset] = split_range(consumeOption(options, \"offset\"));\n  }\n\n  let overlay = process_layer(consumeOption(options, \"overlay\"));\n  let radius = process_radius(consumeOption(options, \"radius\"));\n  let underlay = process_layer(consumeOption(options, \"underlay\"));\n  let ifValue = process_if(consumeOption(options, \"if\"));\n  let custom_function = process_custom_function(consumeOption(options, \"custom_function\"));\n  let custom_pre_function = process_custom_pre_function(consumeOption(options, \"custom_pre_function\"));\n  let fps = consumeOption(options, 'fps');\n\n  if (isArray(fps)) {\n    fps = fps.join('-');\n  }\n\n  let params = {\n    a: normalize_expression(angle),\n    ar: normalize_expression(consumeOption(options, \"aspect_ratio\")),\n    b: background,\n    bo: border,\n    c: crop,\n    co: color,\n    dpr: normalize_expression(dpr),\n    e: normalize_expression(effect),\n    fl: flags,\n    fn: custom_function || custom_pre_function,\n    fps: fps,\n    h: normalize_expression(height),\n    ki: normalize_expression(consumeOption(options, \"keyframe_interval\")),\n    l: overlay,\n    o: normalize_expression(consumeOption(options, \"opacity\")),\n    q: normalize_expression(consumeOption(options, \"quality\")),\n    r: radius,\n    t: named_transformation,\n    u: underlay,\n    w: normalize_expression(width),\n    x: normalize_expression(consumeOption(options, \"x\")),\n    y: normalize_expression(consumeOption(options, \"y\")),\n    z: normalize_expression(consumeOption(options, \"zoom\"))\n  };\n  SIMPLE_PARAMS.forEach(_ref5 => {\n    let [name, short] = _ref5;\n    let value = consumeOption(options, name);\n\n    if (value !== undefined) {\n      params[short] = value;\n    }\n  });\n\n  if (params.vc != null) {\n    params.vc = process_video_params(params.vc);\n  }\n\n  [\"so\", \"eo\", \"du\"].forEach(short => {\n    if (params[short] !== undefined) {\n      params[short] = norm_range_value(params[short]);\n    }\n  });\n  let variablesParam = consumeOption(options, \"variables\", []);\n  let variables = entries(options).filter(_ref6 => {\n    let [key, value] = _ref6;\n    return key.startsWith('$');\n  }).map(_ref7 => {\n    let [key, value] = _ref7;\n    delete options[key];\n    return `${key}_${normalize_expression(value)}`;\n  }).sort().concat(variablesParam.map(_ref8 => {\n    let [name, value] = _ref8;\n    return `${name}_${normalize_expression(value)}`;\n  })).join(',');\n  let transformations = entries(params).filter(_ref9 => {\n    let [key, value] = _ref9;\n    return utils.present(value);\n  }).map(_ref10 => {\n    let [key, value] = _ref10;\n    return key + '_' + value;\n  }).sort().join(',');\n  let raw_transformation = consumeOption(options, 'raw_transformation');\n  transformations = compact([ifValue, variables, transformations, raw_transformation]).join(\",\");\n  base_transformations.push(transformations);\n  transformations = base_transformations;\n\n  if (responsive_width) {\n    let responsive_width_transformation = config().responsive_width_transformation || DEFAULT_RESPONSIVE_WIDTH_TRANSFORMATION;\n    transformations.push(utils.generate_transformation_string(clone(responsive_width_transformation)));\n  }\n\n  if (String(width).startsWith(\"auto\") || responsive_width) {\n    options.responsive = true;\n  }\n\n  if (dpr === \"auto\") {\n    options.hidpi = true;\n  }\n\n  return filter(transformations, utils.present).join(\"/\");\n}\n\nfunction updateable_resource_params(options) {\n  let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (options.access_control != null) {\n    params.access_control = utils.jsonArrayParam(options.access_control);\n  }\n\n  if (options.auto_tagging != null) {\n    params.auto_tagging = options.auto_tagging;\n  }\n\n  if (options.background_removal != null) {\n    params.background_removal = options.background_removal;\n  }\n\n  if (options.categorization != null) {\n    params.categorization = options.categorization;\n  }\n\n  if (options.context != null) {\n    params.context = utils.encode_context(options.context);\n  }\n\n  if (options.metadata != null) {\n    params.metadata = utils.encode_context(options.metadata);\n  }\n\n  if (options.custom_coordinates != null) {\n    params.custom_coordinates = encodeDoubleArray(options.custom_coordinates);\n  }\n\n  if (options.detection != null) {\n    params.detection = options.detection;\n  }\n\n  if (options.face_coordinates != null) {\n    params.face_coordinates = encodeDoubleArray(options.face_coordinates);\n  }\n\n  if (options.headers != null) {\n    params.headers = utils.build_custom_headers(options.headers);\n  }\n\n  if (options.notification_url != null) {\n    params.notification_url = options.notification_url;\n  }\n\n  if (options.ocr != null) {\n    params.ocr = options.ocr;\n  }\n\n  if (options.raw_convert != null) {\n    params.raw_convert = options.raw_convert;\n  }\n\n  if (options.similarity_search != null) {\n    params.similarity_search = options.similarity_search;\n  }\n\n  if (options.tags != null) {\n    params.tags = toArray(options.tags).join(\",\");\n  }\n\n  if (options.quality_override != null) {\n    params.quality_override = options.quality_override;\n  }\n\n  if (options.asset_folder != null) {\n    params.asset_folder = options.asset_folder;\n  }\n\n  if (options.display_name != null) {\n    params.display_name = options.display_name;\n  }\n\n  if (options.unique_display_name != null) {\n    params.unique_display_name = options.unique_display_name;\n  }\n\n  return params;\n}\n/**\n * A list of keys used by the url() function.\n * @private\n */\n\n\nconst URL_KEYS = ['api_secret', 'auth_token', 'cdn_subdomain', 'cloud_name', 'cname', 'format', 'long_url_signature', 'private_cdn', 'resource_type', 'secure', 'secure_cdn_subdomain', 'secure_distribution', 'shorten', 'sign_url', 'ssl_detected', 'type', 'url_suffix', 'use_root_path', 'version'];\n/**\n * Create a new object with only URL parameters\n * @param {object} options The source object\n * @return {Object} An object containing only URL parameters\n */\n\nfunction extractUrlParams(options) {\n  return pickOnlyExistingValues(options, ...URL_KEYS);\n}\n/**\n * Create a new object with only transformation parameters\n * @param {object} options The source object\n * @return {Object} An object containing only transformation parameters\n */\n\n\nfunction extractTransformationParams(options) {\n  return pickOnlyExistingValues(options, ...TRANSFORMATION_PARAMS);\n}\n/**\n * Handle the format parameter for fetch urls\n * @private\n * @param options url and transformation options. This argument may be changed by the function!\n */\n\n\nfunction patchFetchFormat() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (options.type === \"fetch\") {\n    if (options.fetch_format == null) {\n      options.fetch_format = consumeOption(options, \"format\");\n    }\n  }\n}\n\nfunction url(public_id) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let signature, source_to_sign;\n  utils.patchFetchFormat(options);\n  let type = consumeOption(options, \"type\", null);\n  let transformation = utils.generate_transformation_string(options);\n  let resource_type = consumeOption(options, \"resource_type\", \"image\");\n  let version = consumeOption(options, \"version\");\n  let force_version = consumeOption(options, \"force_version\", config().force_version);\n\n  if (force_version == null) {\n    force_version = true;\n  }\n\n  let long_url_signature = !!consumeOption(options, \"long_url_signature\", config().long_url_signature);\n  let format = consumeOption(options, \"format\");\n  let cloud_name = consumeOption(options, \"cloud_name\", config().cloud_name);\n\n  if (!cloud_name) {\n    throw \"Unknown cloud_name\";\n  }\n\n  let private_cdn = consumeOption(options, \"private_cdn\", config().private_cdn);\n  let secure_distribution = consumeOption(options, \"secure_distribution\", config().secure_distribution);\n  let secure = consumeOption(options, \"secure\", null);\n  let ssl_detected = consumeOption(options, \"ssl_detected\", config().ssl_detected);\n\n  if (secure === null) {\n    secure = ssl_detected || config().secure;\n  }\n\n  let cdn_subdomain = consumeOption(options, \"cdn_subdomain\", config().cdn_subdomain);\n  let secure_cdn_subdomain = consumeOption(options, \"secure_cdn_subdomain\", config().secure_cdn_subdomain);\n  let cname = consumeOption(options, \"cname\", config().cname);\n  let shorten = consumeOption(options, \"shorten\", config().shorten);\n  let sign_url = consumeOption(options, \"sign_url\", config().sign_url);\n  let api_secret = consumeOption(options, \"api_secret\", config().api_secret);\n  let url_suffix = consumeOption(options, \"url_suffix\");\n  let use_root_path = consumeOption(options, \"use_root_path\", config().use_root_path);\n  let signature_algorithm = consumeOption(options, \"signature_algorithm\", config().signature_algorithm || DEFAULT_SIGNATURE_ALGORITHM);\n\n  if (long_url_signature) {\n    signature_algorithm = 'sha256';\n  }\n\n  let auth_token = consumeOption(options, \"auth_token\");\n\n  if (auth_token !== false) {\n    auth_token = exports.merge(config().auth_token, auth_token);\n  }\n\n  let preloaded = /^(image|raw)\\/([a-z0-9_]+)\\/v(\\d+)\\/([^#]+)$/.exec(public_id);\n\n  if (preloaded) {\n    resource_type = preloaded[1];\n    type = preloaded[2];\n    version = preloaded[3];\n    public_id = preloaded[4];\n  }\n\n  let original_source = public_id;\n\n  if (public_id == null) {\n    return original_source;\n  }\n\n  public_id = public_id.toString();\n\n  if (type === null && public_id.match(/^https?:\\//i)) {\n    return original_source;\n  }\n\n  [resource_type, type] = finalize_resource_type(resource_type, type, url_suffix, use_root_path, shorten);\n  [public_id, source_to_sign] = finalize_source(public_id, format, url_suffix);\n\n  if (version == null && force_version && source_to_sign.indexOf(\"/\") >= 0 && !source_to_sign.match(/^v[0-9]+/) && !source_to_sign.match(/^https?:\\//)) {\n    version = 1;\n  }\n\n  if (version != null) {\n    version = `v${version}`;\n  } else {\n    version = null;\n  }\n\n  transformation = transformation.replace(/([^:])\\/\\//g, '$1/');\n\n  if (sign_url && isEmpty(auth_token)) {\n    let to_sign = [transformation, source_to_sign].filter(function (part) {\n      return part != null && part !== '';\n    }).join('/');\n\n    try {\n      for (let i = 0; to_sign !== decodeURIComponent(to_sign) && i < 10; i++) {\n        to_sign = decodeURIComponent(to_sign);\n      } // eslint-disable-next-line no-empty\n\n    } catch (error) {}\n\n    let hash = computeHash(to_sign + api_secret, signature_algorithm, 'base64');\n    signature = hash.replace(/\\//g, '_').replace(/\\+/g, '-').substring(0, long_url_signature ? 32 : 8);\n    signature = `s--${signature}--`;\n  }\n\n  let prefix = unsigned_url_prefix(public_id, cloud_name, private_cdn, cdn_subdomain, secure_cdn_subdomain, cname, secure, secure_distribution);\n  let resultUrl = [prefix, resource_type, type, signature, transformation, version, public_id].filter(function (part) {\n    return part != null && part !== '';\n  }).join('/').replace(/ /g, '%20');\n\n  if (sign_url && !isEmpty(auth_token)) {\n    auth_token.url = urlParse(resultUrl).path;\n    let token = generate_token(auth_token);\n    resultUrl += `?${token}`;\n  }\n\n  let urlAnalytics = ensureOption(options, 'urlAnalytics', false);\n\n  if (urlAnalytics === true) {\n    let sdkVersions = getSDKVersions();\n    let analyticsOptions = getAnalyticsOptions(Object.assign({}, options, sdkVersions));\n    let sdkAnalyticsSignature = getSDKAnalyticsSignature(analyticsOptions); // url might already have a '?' query param\n\n    let appender = '?';\n\n    if (resultUrl.indexOf('?') >= 0) {\n      appender = '&';\n    }\n\n    resultUrl = `${resultUrl}${appender}_s=${sdkAnalyticsSignature}`;\n  }\n\n  return resultUrl;\n}\n\nfunction video_url(public_id, options) {\n  options = extend({\n    resource_type: 'video'\n  }, options);\n  return utils.url(public_id, options);\n}\n\nfunction finalize_source(source, format, url_suffix) {\n  let source_to_sign;\n  source = source.replace(/([^:])\\/\\//g, '$1/');\n\n  if (source.match(/^https?:\\//i)) {\n    source = smart_escape(source);\n    source_to_sign = source;\n  } else {\n    source = encodeURIComponent(decodeURIComponent(source)).replace(/%3A/g, \":\").replace(/%2F/g, \"/\");\n    source_to_sign = source;\n\n    if (url_suffix) {\n      if (url_suffix.match(/[\\.\\/]/)) {\n        throw new Error('url_suffix should not include . or /');\n      }\n\n      source = source + '/' + url_suffix;\n    }\n\n    if (format != null) {\n      source = source + '.' + format;\n      source_to_sign = source_to_sign + '.' + format;\n    }\n  }\n\n  return [source, source_to_sign];\n}\n\nfunction video_thumbnail_url(public_id, options) {\n  options = extend({}, DEFAULT_POSTER_OPTIONS, options);\n  return utils.url(public_id, options);\n}\n\nfunction finalize_resource_type(resource_type, type, url_suffix, use_root_path, shorten) {\n  if (type == null) {\n    type = 'upload';\n  }\n\n  if (url_suffix != null) {\n    if (resource_type === 'image' && type === 'upload') {\n      resource_type = \"images\";\n      type = null;\n    } else if (resource_type === 'image' && type === 'private') {\n      resource_type = 'private_images';\n      type = null;\n    } else if (resource_type === 'image' && type === 'authenticated') {\n      resource_type = 'authenticated_images';\n      type = null;\n    } else if (resource_type === 'raw' && type === 'upload') {\n      resource_type = 'files';\n      type = null;\n    } else if (resource_type === 'video' && type === 'upload') {\n      resource_type = 'videos';\n      type = null;\n    } else {\n      throw new Error(\"URL Suffix only supported for image/upload, image/private, image/authenticated, video/upload and raw/upload\");\n    }\n  }\n\n  if (use_root_path) {\n    if (resource_type === 'image' && type === 'upload' || resource_type === 'images' && type == null) {\n      resource_type = null;\n      type = null;\n    } else {\n      throw new Error(\"Root path only supported for image/upload\");\n    }\n  }\n\n  if (shorten && resource_type === 'image' && type === 'upload') {\n    resource_type = 'iu';\n    type = null;\n  }\n\n  return [resource_type, type];\n} // cdn_subdomain and secure_cdn_subdomain\n// 1) Customers in shared distribution (e.g. res.cloudinary.com)\n//    if cdn_domain is true uses res-[1-5].cloudinary.com for both http and https.\n//    Setting secure_cdn_subdomain to false disables this for https.\n// 2) Customers with private cdn\n//    if cdn_domain is true uses cloudname-res-[1-5].cloudinary.com for http\n//    if secure_cdn_domain is true uses cloudname-res-[1-5].cloudinary.com for https\n//      (please contact support if you require this)\n// 3) Customers with cname\n//    if cdn_domain is true uses a[1-5].cname for http.\n//    For https, uses the same naming scheme as 1 for shared distribution and as 2 for private distribution.\n\n\nfunction unsigned_url_prefix(source, cloud_name, private_cdn, cdn_subdomain, secure_cdn_subdomain, cname, secure, secure_distribution) {\n  let prefix;\n\n  if (cloud_name.indexOf(\"/\") === 0) {\n    return '/res' + cloud_name;\n  }\n\n  let shared_domain = !private_cdn;\n\n  if (secure) {\n    if (secure_distribution == null || secure_distribution === exports.OLD_AKAMAI_SHARED_CDN) {\n      secure_distribution = private_cdn ? cloud_name + \"-res.cloudinary.com\" : exports.SHARED_CDN;\n    }\n\n    if (shared_domain == null) {\n      shared_domain = secure_distribution === exports.SHARED_CDN;\n    }\n\n    if (secure_cdn_subdomain == null && shared_domain) {\n      secure_cdn_subdomain = cdn_subdomain;\n    }\n\n    if (secure_cdn_subdomain) {\n      secure_distribution = secure_distribution.replace('res.cloudinary.com', 'res-' + (crc32(source) % 5 + 1 + '.cloudinary.com'));\n    }\n\n    prefix = 'https://' + secure_distribution;\n  } else if (cname) {\n    let subdomain = cdn_subdomain ? 'a' + (crc32(source) % 5 + 1) + '.' : '';\n    prefix = 'http://' + subdomain + cname;\n  } else {\n    let cdn_part = private_cdn ? cloud_name + '-' : '';\n    let subdomain_part = cdn_subdomain ? '-' + (crc32(source) % 5 + 1) : '';\n    let host = [cdn_part, 'res', subdomain_part, '.cloudinary.com'].join('');\n    prefix = 'http://' + host;\n  }\n\n  if (shared_domain) {\n    prefix += '/' + cloud_name;\n  }\n\n  return prefix;\n}\n\nfunction base_api_url() {\n  let path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let cloudinary = ensureOption(options, \"upload_prefix\", UPLOAD_PREFIX);\n  let cloud_name = ensureOption(options, \"cloud_name\");\n\n  let encode_path = unencoded_path => encodeURIComponent(unencoded_path).replace(\"'\", '%27');\n\n  let encoded_path = Array.isArray(path) ? path.map(encode_path) : encode_path(path);\n  return [cloudinary, \"v1_1\", cloud_name].concat(encoded_path).join(\"/\");\n}\n\nfunction api_url() {\n  let action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'upload';\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let resource_type = options.resource_type || \"image\";\n  return base_api_url([resource_type, action], options);\n}\n\nfunction random_public_id() {\n  return crypto.randomBytes(12).toString('base64').replace(/[^a-z0-9]/g, \"\");\n}\n\nfunction signed_preloaded_image(result) {\n  return `${result.resource_type}/upload/v${result.version}/${filter([result.public_id, result.format], utils.present).join(\".\")}#${result.signature}`;\n}\n\nfunction api_sign_request(params_to_sign, api_secret) {\n  let to_sign = entries(params_to_sign).filter(_ref11 => {\n    let [k, v] = _ref11;\n    return utils.present(v);\n  }).map(_ref12 => {\n    let [k, v] = _ref12;\n    return `${k}=${toArray(v).join(\",\")}`;\n  }).sort().join(\"&\");\n  return computeHash(to_sign + api_secret, config().signature_algorithm || DEFAULT_SIGNATURE_ALGORITHM, 'hex');\n}\n/**\n * Computes hash from input string using specified algorithm.\n * @private\n * @param {string} input string which to compute hash from\n * @param {string} signature_algorithm algorithm to use for computing hash\n * @param {string} encoding type of encoding\n * @return {string} computed hash value\n */\n\n\nfunction computeHash(input, signature_algorithm, encoding) {\n  if (!SUPPORTED_SIGNATURE_ALGORITHMS.includes(signature_algorithm)) {\n    throw new Error(`Signature algorithm ${signature_algorithm} is not supported. Supported algorithms: ${SUPPORTED_SIGNATURE_ALGORITHMS.join(', ')}`);\n  }\n\n  let hash = crypto.createHash(signature_algorithm);\n  hash.update(utf8_encode(input), 'binary');\n  return hash.digest(encoding);\n}\n\nfunction clear_blank(hash) {\n  let filtered_hash = {};\n  entries(hash).filter(_ref13 => {\n    let [k, v] = _ref13;\n    return utils.present(v);\n  }).forEach(_ref14 => {\n    let [k, v] = _ref14;\n    filtered_hash[k] = v;\n  });\n  return filtered_hash;\n}\n\nfunction merge(hash1, hash2) {\n  return { ...hash1,\n    ...hash2\n  };\n}\n\nfunction sign_request(params) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let apiKey = ensureOption(options, 'api_key');\n  let apiSecret = ensureOption(options, 'api_secret');\n  params = exports.clear_blank(params);\n  params.signature = exports.api_sign_request(params, apiSecret);\n  params.api_key = apiKey;\n  return params;\n}\n\nfunction webhook_signature(data, timestamp) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  ensurePresenceOf({\n    data,\n    timestamp\n  });\n  let api_secret = ensureOption(options, 'api_secret');\n  let signature_algorithm = ensureOption(options, 'signature_algorithm', DEFAULT_SIGNATURE_ALGORITHM);\n  return computeHash(data + timestamp + api_secret, signature_algorithm, 'hex');\n}\n/**\n * Verifies the authenticity of a notification signature\n *\n * @param {string} body JSON of the request's body\n * @param {number} timestamp Unix timestamp in seconds. Can be retrieved from the X-Cld-Timestamp header\n * @param {string} signature Actual signature. Can be retrieved from the X-Cld-Signature header\n * @param {number} [valid_for=7200] The desired time in seconds for considering the request valid\n *\n * @return {boolean}\n */\n\n\nfunction verifyNotificationSignature(body, timestamp, signature) {\n  let valid_for = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 7200;\n\n  // verify that signature is valid for the given timestamp\n  if (timestamp < Math.round(Date.now() / 1000) - valid_for) {\n    return false;\n  }\n\n  const payload_hash = utils.webhook_signature(body, timestamp, {\n    api_secret: config().api_secret,\n    signature_algorithm: config().signature_algorithm\n  });\n  return signature === payload_hash;\n}\n\nfunction process_request_params(params, options) {\n  if (options.unsigned != null && options.unsigned) {\n    params = exports.clear_blank(params);\n    delete params.timestamp;\n  } else if (options.oauth_token || config().oauth_token) {\n    params = exports.clear_blank(params);\n  } else if (options.signature) {\n    params = exports.clear_blank(options);\n  } else {\n    params = exports.sign_request(params, options);\n  }\n\n  return params;\n}\n\nfunction private_download_url(public_id, format) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let params = exports.sign_request({\n    timestamp: options.timestamp || exports.timestamp(),\n    public_id: public_id,\n    format: format,\n    type: options.type,\n    attachment: options.attachment,\n    expires_at: options.expires_at\n  }, options);\n  return exports.api_url(\"download\", options) + \"?\" + querystring.stringify(params);\n}\n/**\n * Utility method that uses the deprecated ZIP download API.\n * @deprecated Replaced by {download_zip_url} that uses the more advanced and robust archive generation and download API\n */\n\n\nfunction zip_download_url(tag) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let params = exports.sign_request({\n    timestamp: options.timestamp || exports.timestamp(),\n    tag: tag,\n    transformation: utils.generate_transformation_string(options)\n  }, options);\n  return exports.api_url(\"download_tag.zip\", options) + \"?\" + hashToQuery(params);\n}\n/**\n * The returned url should allow downloading the backedup asset based on the\n * version and asset id\n * asset and version id are returned with resource(<PUBLIC_ID1>, { versions: true })\n * @param asset_id\n * @param version_id\n * @param options\n * @returns {string }\n */\n\n\nfunction download_backedup_asset(asset_id, version_id) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let params = exports.sign_request({\n    timestamp: options.timestamp || exports.timestamp(),\n    asset_id: asset_id,\n    version_id: version_id\n  }, options);\n  return exports.base_api_url(['download_backup'], options) + \"?\" + hashToQuery(params);\n}\n/**\n * Utility method to create a signed URL for specified resources.\n * @param action\n * @param params\n * @param options\n */\n\n\nfunction api_download_url(action, params, options) {\n  const download_params = { ...params,\n    mode: \"download\"\n  };\n  let cloudinary_params = exports.sign_request(download_params, options);\n  return exports.api_url(action, options) + \"?\" + hashToQuery(cloudinary_params);\n}\n/**\n * Returns a URL that when invokes creates an archive and returns it.\n * @param {object} options\n * @param {string} [options.resource_type=\"image\"] The resource type of files to include in the archive.\n *   Must be one of :image | :video | :raw\n * @param {string} [options.type=\"upload\"] The specific file type of resources: :upload|:private|:authenticated\n * @param {string|Array} [options.tags] list of tags to include in the archive\n * @param {string|Array<string>} [options.public_ids] list of public_ids to include in the archive\n * @param {string|Array<string>} [options.prefixes]  list of prefixes of public IDs (e.g., folders).\n * @param {string|Array<string>} [options.fully_qualified_public_ids] list of fully qualified public_ids to include\n *   in the archive.\n * @param {string|Array<string>} [options.transformations]  list of transformations.\n *   The derived images of the given transformations are included in the archive. Using the string representation of\n *   multiple chained transformations as we use for the 'eager' upload parameter.\n * @param {string} [options.mode=\"create\"] return the generated archive file or to store it as a raw resource and\n *   return a JSON with URLs for accessing the archive. Possible values: :download, :create\n * @param {string} [options.target_format=\"zip\"]\n * @param {string} [options.target_public_id]  public ID of the generated raw resource.\n *   Relevant only for the create mode. If not specified, random public ID is generated.\n * @param {boolean} [options.flatten_folders=false] If true, flatten public IDs with folders to be in the root\n *   of the archive. Add numeric counter to the file name in case of a name conflict.\n * @param {boolean} [options.flatten_transformations=false] If true, and multiple transformations are given,\n *   flatten the folder structure of derived images and store the transformation details on the file name instead.\n * @param {boolean} [options.use_original_filename] Use the original file name of included images\n *   (if available) instead of the public ID.\n * @param {boolean} [options.async=false] If true, return immediately and perform archive creation in the background.\n *   Relevant only for the create mode.\n * @param {string} [options.notification_url] URL to send an HTTP post request (webhook) to when the\n *   archive creation is completed.\n * @param {string|Array<string>} [options.target_tags=] Allows assigning one or more tags to the generated archive file\n *   (for later housekeeping via the admin API).\n * @param {string} [options.keep_derived=false] keep the derived images used for generating the archive\n * @return {String} archive url\n */\n\n\nfunction download_archive_url() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const params = exports.archive_params(merge(options, {\n    mode: \"download\"\n  }));\n  return api_download_url(\"generate_archive\", params, options);\n}\n/**\n * Returns a URL that when invokes creates an zip archive and returns it.\n * @see download_archive_url\n */\n\n\nfunction download_zip_url() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return exports.download_archive_url(merge(options, {\n    target_format: \"zip\"\n  }));\n}\n/**\n * Creates and returns a URL that when invoked creates an archive of a folder\n * @param {string} folder_path Full path (from the root) of the folder to download\n * @param {object} options Additional options\n * @returns {string} Url for downloading an archive of a folder\n */\n\n\nfunction download_folder(folder_path) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options.resource_type = options.resource_type || \"all\";\n  options.prefixes = folder_path;\n  let cloudinary_params = exports.sign_request(exports.archive_params(merge(options, {\n    mode: \"download\"\n  })), options);\n  return exports.api_url(\"generate_archive\", options) + \"?\" + hashToQuery(cloudinary_params);\n}\n/**\n * Render the key/value pair as an HTML tag attribute\n * @private\n * @param {string} key\n * @param {string|boolean|number} [value]\n * @return {string} A string representing the HTML attribute\n */\n\n\nfunction join_pair(key, value) {\n  if (!value) {\n    return void 0;\n  }\n\n  return value === true ? key : key + \"='\" + value + \"'\";\n}\n/**\n * If the given value is a string, replaces single or double quotes with character entities\n * @private\n * @param {*} value The string to encode quotes in\n * @return {*} Encoded string or original value if not a string\n */\n\n\nfunction escapeQuotes(value) {\n  return isString(value) ? value.replace(/\\\"/g, '&#34;').replace(/\\'/g, '&#39;') : value;\n}\n/**\n *\n * @param attrs\n * @return {*}\n */\n\n\nexports.html_attrs = function html_attrs(attrs) {\n  return filter(map(attrs, function (value, key) {\n    return join_pair(key, escapeQuotes(value));\n  })).sort().join(\" \");\n};\n\nconst CLOUDINARY_JS_CONFIG_PARAMS = ['api_key', 'cloud_name', 'private_cdn', 'secure_distribution', 'cdn_subdomain'];\n\nfunction cloudinary_js_config() {\n  let params = pickOnlyExistingValues(config(), ...CLOUDINARY_JS_CONFIG_PARAMS);\n  return `<script type='text/javascript'>\\n$.cloudinary.config(${JSON.stringify(params)});\\n</script>`;\n}\n\nfunction v1_result_adapter(callback) {\n  if (callback == null) {\n    return undefined;\n  }\n\n  return function (result) {\n    if (result.error != null) {\n      return callback(result.error);\n    }\n\n    return callback(void 0, result);\n  };\n}\n\nfunction v1_adapter(name, num_pass_args, v1) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    let pass_args = take(args, num_pass_args);\n    let options = args[num_pass_args];\n    let callback = args[num_pass_args + 1];\n\n    if (callback == null && isFunction(options)) {\n      callback = options;\n      options = {};\n    }\n\n    callback = v1_result_adapter(callback);\n    args = pass_args.concat([callback, options]);\n    return v1[name].apply(this, args);\n  };\n}\n\nfunction v1_adapters(exports, v1, mapping) {\n  return Object.keys(mapping).map(name => {\n    let num_pass_args = mapping[name];\n    exports[name] = v1_adapter(name, num_pass_args, v1);\n    return exports[name];\n  });\n}\n\nfunction as_safe_bool(value) {\n  if (value == null) {\n    return void 0;\n  }\n\n  if (value === true || value === 'true' || value === '1') {\n    value = 1;\n  }\n\n  if (value === false || value === 'false' || value === '0') {\n    value = 0;\n  }\n\n  return value;\n}\n\nconst NUMBER_PATTERN = \"([0-9]*)\\\\.([0-9]+)|([0-9]+)\";\nconst OFFSET_ANY_PATTERN = `(${NUMBER_PATTERN})([%pP])?`;\nconst RANGE_VALUE_RE = RegExp(`^${OFFSET_ANY_PATTERN}$`);\nconst OFFSET_ANY_PATTERN_RE = RegExp(`(${OFFSET_ANY_PATTERN})\\\\.\\\\.(${OFFSET_ANY_PATTERN})`); // Split a range into the start and end values\n\nfunction split_range(range) {\n  // :nodoc:\n  switch (range.constructor) {\n    case String:\n      if (!OFFSET_ANY_PATTERN_RE.test(range)) {\n        return range;\n      }\n\n      return range.split(\"..\");\n\n    case Array:\n      return [first(range), last(range)];\n\n    default:\n      return [null, null];\n  }\n}\n\nfunction norm_range_value(value) {\n  // :nodoc:\n  let offset = String(value).match(RANGE_VALUE_RE);\n\n  if (offset) {\n    let modifier = offset[5] ? 'p' : '';\n    value = `${offset[1] || offset[4]}${modifier}`;\n  }\n\n  return value;\n}\n/**\n * A video codec parameter can be either a String or a Hash.\n * @param {Object} param <code>vc_<codec>[ : <profile> : [<level>]]</code>\n *                       or <code>{ codec: 'h264', profile: 'basic', level: '3.1' }</code>\n * @return {String} <code><codec> : <profile> : [<level>]]</code> if a Hash was provided\n *                   or the param if a String was provided.\n *                   Returns null if param is not a Hash or String\n */\n\n\nfunction process_video_params(param) {\n  switch (param.constructor) {\n    case Object:\n      {\n        let video = \"\";\n\n        if ('codec' in param) {\n          video = param.codec;\n\n          if ('profile' in param) {\n            video += \":\" + param.profile;\n\n            if ('level' in param) {\n              video += \":\" + param.level;\n            }\n          }\n        }\n\n        return video;\n      }\n\n    case String:\n      return param;\n\n    default:\n      return null;\n  }\n}\n/**\n * Returns a Hash of parameters used to create an archive\n * @private\n * @param {object} options\n * @return {object} Archive API parameters\n */\n\n\nfunction archive_params() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    allow_missing: exports.as_safe_bool(options.allow_missing),\n    async: exports.as_safe_bool(options.async),\n    expires_at: options.expires_at,\n    flatten_folders: exports.as_safe_bool(options.flatten_folders),\n    flatten_transformations: exports.as_safe_bool(options.flatten_transformations),\n    keep_derived: exports.as_safe_bool(options.keep_derived),\n    mode: options.mode,\n    notification_url: options.notification_url,\n    prefixes: options.prefixes && toArray(options.prefixes),\n    fully_qualified_public_ids: options.fully_qualified_public_ids && toArray(options.fully_qualified_public_ids),\n    public_ids: options.public_ids && toArray(options.public_ids),\n    skip_transformation_name: exports.as_safe_bool(options.skip_transformation_name),\n    tags: options.tags && toArray(options.tags),\n    target_format: options.target_format,\n    target_public_id: options.target_public_id,\n    target_tags: options.target_tags && toArray(options.target_tags),\n    timestamp: options.timestamp || exports.timestamp(),\n    transformations: utils.build_eager(options.transformations),\n    type: options.type,\n    use_original_filename: exports.as_safe_bool(options.use_original_filename)\n  };\n}\n\nexports.create_source_tag = function create_source_tag(src, source_type) {\n  let codecs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let video_type = source_type === 'ogv' ? 'ogg' : source_type;\n  let mime_type = `video/${video_type}`;\n\n  if (!isEmpty(codecs)) {\n    let codecs_str = isArray(codecs) ? codecs.join(', ') : codecs;\n    mime_type += `; codecs=${codecs_str}`;\n  }\n\n  return `<source ${utils.html_attrs({\n    src,\n    type: mime_type\n  })}>`;\n};\n\nfunction build_explicit_api_params(public_id) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return [exports.build_upload_params(extend({}, {\n    public_id\n  }, options))];\n}\n\nfunction generate_responsive_breakpoints_string(breakpoints) {\n  if (breakpoints == null) {\n    return null;\n  }\n\n  breakpoints = clone(breakpoints);\n\n  if (!isArray(breakpoints)) {\n    breakpoints = [breakpoints];\n  }\n\n  for (let j = 0; j < breakpoints.length; j++) {\n    let breakpoint_settings = breakpoints[j];\n\n    if (breakpoint_settings != null) {\n      if (breakpoint_settings.transformation) {\n        breakpoint_settings.transformation = utils.generate_transformation_string(clone(breakpoint_settings.transformation));\n      }\n    }\n  }\n\n  return JSON.stringify(breakpoints);\n}\n\nfunction build_streaming_profiles_param() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let params = pickOnlyExistingValues(options, \"display_name\", \"representations\");\n\n  if (isArray(params.representations)) {\n    params.representations = JSON.stringify(params.representations.map(r => ({\n      transformation: utils.generate_transformation_string(r.transformation)\n    })));\n  }\n\n  return params;\n}\n\nfunction hashToParameters(hash) {\n  return entries(hash).reduce((parameters, _ref15) => {\n    let [key, value] = _ref15;\n\n    if (isArray(value)) {\n      key = key.endsWith('[]') ? key : key + '[]';\n      const items = value.map(v => [key, v]);\n      parameters = parameters.concat(items);\n    } else {\n      parameters.push([key, value]);\n    }\n\n    return parameters;\n  }, []);\n}\n/**\n * Convert a hash of values to a URI query string.\n * Array values are spread as individual parameters.\n * @param {object} hash Key-value parameters\n * @return {string} A URI query string.\n */\n\n\nfunction hashToQuery(hash) {\n  return hashToParameters(hash).map(_ref16 => {\n    let [key, value] = _ref16;\n    return `${querystring.escape(key)}=${querystring.escape(value)}`;\n  }).join('&');\n}\n/**\n * Verify that the parameter `value` is defined and it's string value is not zero.\n * <br>This function should not be confused with `isEmpty()`.\n * @private\n * @param {string|number} value The value to check.\n * @return {boolean} True if the value is defined and not empty.\n */\n\n\nfunction present(value) {\n  return value != null && (\"\" + value).length > 0;\n}\n/**\n * Returns a new object with key values from source based on the keys.\n * `null` or `undefined` values are not copied.\n * @private\n * @param {object} source The object to pick values from.\n * @param {...string} keys One or more keys to copy from source.\n * @return {object} A new object with the required keys and values.\n */\n\n\nfunction pickOnlyExistingValues(source) {\n  let result = {};\n\n  if (source) {\n    for (var _len2 = arguments.length, keys = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      keys[_key2 - 1] = arguments[_key2];\n    }\n\n    keys.forEach(key => {\n      if (source[key] != null) {\n        result[key] = source[key];\n      }\n    });\n  }\n\n  return result;\n}\n/**\n * Returns a JSON array as String.\n * Yields the array before it is converted to JSON format\n * @private\n * @param {object|String|Array<object>} data\n * @param {function(*):*} [modifier] called with the array before the array is stringified\n * @return {String|null} a JSON array string or `null` if data is `null`\n */\n\n\nfunction jsonArrayParam(data, modifier) {\n  if (!data) {\n    return null;\n  }\n\n  if (isString(data)) {\n    data = JSON.parse(data);\n  }\n\n  if (!isArray(data)) {\n    data = [data];\n  }\n\n  if (isFunction(modifier)) {\n    data = modifier(data);\n  }\n\n  return JSON.stringify(data);\n}\n\nfunction optionalRequire(moduleName) {\n  let module;\n\n  try {\n    module = require(moduleName);\n    return module;\n  } catch (e) {\n    if (e.code === \"MODULE_NOT_FOUND\") {\n      return null;\n    }\n\n    throw e;\n  }\n}\n/**\n * Empty function - do nothing\n *\n */\n\n\nexports.NOP = function () {};\n\nexports.generate_auth_token = generate_auth_token;\nexports.getUserAgent = getUserAgent;\nexports.build_upload_params = build_upload_params;\nexports.build_multi_and_sprite_params = build_multi_and_sprite_params;\nexports.api_download_url = api_download_url;\n\nexports.timestamp = () => Math.floor(new Date().getTime() / 1000);\n\nexports.option_consume = consumeOption; // for backwards compatibility\n\nexports.build_array = toArray; // for backwards compatibility\n\nexports.encode_double_array = encodeDoubleArray;\nexports.encode_key_value = encode_key_value;\nexports.encode_context = encode_context;\nexports.build_eager = build_eager;\nexports.build_custom_headers = build_custom_headers;\nexports.generate_transformation_string = generate_transformation_string;\nexports.updateable_resource_params = updateable_resource_params;\nexports.extractUrlParams = extractUrlParams;\nexports.extractTransformationParams = extractTransformationParams;\nexports.patchFetchFormat = patchFetchFormat;\nexports.url = url;\nexports.video_url = video_url;\nexports.video_thumbnail_url = video_thumbnail_url;\nexports.api_url = api_url;\nexports.random_public_id = random_public_id;\nexports.signed_preloaded_image = signed_preloaded_image;\nexports.api_sign_request = api_sign_request;\nexports.clear_blank = clear_blank;\nexports.merge = merge;\nexports.sign_request = sign_request;\nexports.webhook_signature = webhook_signature;\nexports.verifyNotificationSignature = verifyNotificationSignature;\nexports.process_request_params = process_request_params;\nexports.private_download_url = private_download_url;\nexports.zip_download_url = zip_download_url;\nexports.download_archive_url = download_archive_url;\nexports.download_zip_url = download_zip_url;\nexports.cloudinary_js_config = cloudinary_js_config;\nexports.v1_adapters = v1_adapters;\nexports.as_safe_bool = as_safe_bool;\nexports.archive_params = archive_params;\nexports.build_explicit_api_params = build_explicit_api_params;\nexports.generate_responsive_breakpoints_string = generate_responsive_breakpoints_string;\nexports.build_streaming_profiles_param = build_streaming_profiles_param;\nexports.hashToParameters = hashToParameters;\nexports.present = present;\nexports.only = pickOnlyExistingValues; // for backwards compatibility\n\nexports.pickOnlyExistingValues = pickOnlyExistingValues;\nexports.jsonArrayParam = jsonArrayParam;\nexports.download_folder = download_folder;\nexports.base_api_url = base_api_url;\nexports.download_backedup_asset = download_backedup_asset;\nexports.optionalRequire = optionalRequire; // was exported before, so kept for backwards compatibility\n\nexports.DEFAULT_POSTER_OPTIONS = DEFAULT_POSTER_OPTIONS;\nexports.DEFAULT_VIDEO_SOURCE_TYPES = DEFAULT_VIDEO_SOURCE_TYPES;\nObject.assign(module.exports, {\n  normalize_expression,\n  at,\n  clone,\n  extend,\n  filter,\n  includes,\n  isArray,\n  isEmpty,\n  isNumber,\n  isObject,\n  isRemoteUrl,\n  isString,\n  isUndefined,\n  keys: source => Object.keys(source),\n  ensurePresenceOf\n});","map":{"version":3,"names":["crypto","require","querystring","urlParse","parse","compact","first","isFunction","isPlainObject","last","map","take","at","clone","extend","filter","includes","isArray","isEmpty","isNumber","isObject","isString","isUndefined","smart_escape","consumeOption","toArray","base64EncodeURL","encodeDoubleArray","config","generate_token","utf8_encode","crc32","ensurePresenceOf","ensureOption","defaults","entries","isRemoteUrl","getSDKVersions","getAnalyticsOptions","getSDKAnalyticsSignature","Util","exports","module","utils","VERSION","version","error","generate_auth_token","options","token_options","Object","assign","auth_token","CF_SHARED_CDN","OLD_AKAMAI_SHARED_CDN","AKAMAI_SHARED_CDN","SHARED_CDN","USER_AGENT","process","versions","node","userPlatform","getUserAgent","DEFAULT_RESPONSIVE_WIDTH_TRANSFORMATION","DEFAULT_POSTER_OPTIONS","DEFAULT_VIDEO_SOURCE_TYPES","CONDITIONAL_OPERATORS","PREDEFINED_VARS","LAYER_KEYWORD_PARAMS","TRANSFORMATION_PARAMS","SIMPLE_PARAMS","UPLOAD_PREFIX","SUPPORTED_SIGNATURE_ALGORITHMS","DEFAULT_SIGNATURE_ALGORITHM","textStyle","layer","keywords","style","text_style","keys","forEach","attr","default_value","attr_value","push","split","pop","hasOwnProperty","font_size","font_family","unshift","join","normalize_expression","expression","length","match","operators","operatorsPattern","operatorsReplaceRE","RegExp","replace","predefinedVarsPattern","v","userVariablePattern","variablesReplaceRE","process_custom_function","customFunction","function_type","encodedSource","source","process_custom_pre_function","customPreFunction","result","process_if","ifValue","process_layer","resource_type","url","public_id","format","type","text","components","noPublicId","noStyle","re","start","textSource","decodeURIComponent","res","exec","slice","index","encodeURIComponent","test","substr","process_radius","radius","Error","findIndex","x","build_multi_and_sprite_params","tagOrOptions","tag","urls","transformation","generate_transformation_string","fetch_format","timestamp","async","notification_url","build_upload_params","params","access_mode","allowed_formats","asset_folder","as_safe_bool","backup","callback","cinemagraph_analysis","colors","display_name","discard_original_filename","eager","build_eager","eager_async","eager_notification_url","eval","exif","faces","folder","filename_override","image_metadata","invalidate","moderation","overwrite","phash","proxy","public_id_prefix","quality_analysis","responsive_breakpoints","generate_responsive_breakpoints_string","return_delete_token","unique_filename","upload_preset","use_filename","use_filename_as_display_name","quality_override","accessibility_analysis","use_asset_folder_as_public_id_prefix","updateable_resource_params","encode_key_value","arg","k","escapeMetadataValue","value","toString","encode_context","metadataObj","key","values","innerVal","transformations","transformationString","build_custom_headers","headers","t","present","responsive_width","width","height","size","has_layer","overlay","underlay","crop","angle","no_html_sizes","indexOf","parseFloat","background","color","base_transformations","named_transformation","some","tr","effect","border","flags","dpr","offset","start_offset","end_offset","split_range","custom_function","custom_pre_function","fps","a","ar","b","bo","c","co","e","fl","fn","h","ki","l","o","q","r","u","w","y","z","name","short","undefined","vc","process_video_params","norm_range_value","variablesParam","variables","startsWith","sort","concat","raw_transformation","responsive_width_transformation","String","responsive","hidpi","access_control","jsonArrayParam","auto_tagging","background_removal","categorization","context","metadata","custom_coordinates","detection","face_coordinates","ocr","raw_convert","similarity_search","tags","unique_display_name","URL_KEYS","extractUrlParams","pickOnlyExistingValues","extractTransformationParams","patchFetchFormat","signature","source_to_sign","force_version","long_url_signature","cloud_name","private_cdn","secure_distribution","secure","ssl_detected","cdn_subdomain","secure_cdn_subdomain","cname","shorten","sign_url","api_secret","url_suffix","use_root_path","signature_algorithm","merge","preloaded","original_source","finalize_resource_type","finalize_source","to_sign","part","i","hash","computeHash","substring","prefix","unsigned_url_prefix","resultUrl","path","token","urlAnalytics","sdkVersions","analyticsOptions","sdkAnalyticsSignature","appender","video_url","video_thumbnail_url","shared_domain","subdomain","cdn_part","subdomain_part","host","base_api_url","cloudinary","encode_path","unencoded_path","encoded_path","Array","api_url","action","random_public_id","randomBytes","signed_preloaded_image","api_sign_request","params_to_sign","input","encoding","createHash","update","digest","clear_blank","filtered_hash","hash1","hash2","sign_request","apiKey","apiSecret","api_key","webhook_signature","data","verifyNotificationSignature","body","valid_for","Math","round","Date","now","payload_hash","process_request_params","unsigned","oauth_token","private_download_url","attachment","expires_at","stringify","zip_download_url","hashToQuery","download_backedup_asset","asset_id","version_id","api_download_url","download_params","mode","cloudinary_params","download_archive_url","archive_params","download_zip_url","target_format","download_folder","folder_path","prefixes","join_pair","escapeQuotes","html_attrs","attrs","CLOUDINARY_JS_CONFIG_PARAMS","cloudinary_js_config","JSON","v1_result_adapter","v1_adapter","num_pass_args","v1","args","pass_args","apply","v1_adapters","mapping","NUMBER_PATTERN","OFFSET_ANY_PATTERN","RANGE_VALUE_RE","OFFSET_ANY_PATTERN_RE","range","constructor","modifier","param","video","codec","profile","level","allow_missing","flatten_folders","flatten_transformations","keep_derived","fully_qualified_public_ids","public_ids","skip_transformation_name","target_public_id","target_tags","use_original_filename","create_source_tag","src","source_type","codecs","video_type","mime_type","codecs_str","build_explicit_api_params","breakpoints","j","breakpoint_settings","build_streaming_profiles_param","representations","hashToParameters","reduce","parameters","endsWith","items","escape","optionalRequire","moduleName","code","NOP","floor","getTime","option_consume","build_array","encode_double_array","only"],"sources":["/Users/abhinavkumar/Desktop/dbms/client/node_modules/cloudinary/lib/utils/index.js"],"sourcesContent":["/**\n * Utilities\n * @module utils\n * @borrows module:auth_token as generate_auth_token\n */\n\nconst crypto = require(\"crypto\");\nconst querystring = require(\"querystring\");\nconst urlParse = require(\"url\").parse;\n\n// Functions used internally\nconst compact = require(\"lodash/compact\");\nconst first = require(\"lodash/first\");\nconst isFunction = require(\"lodash/isFunction\");\nconst isPlainObject = require(\"lodash/isPlainObject\");\nconst last = require(\"lodash/last\");\nconst map = require(\"lodash/map\");\nconst take = require(\"lodash/take\");\nconst at = require(\"lodash/at\");\n\n// Exposed by the module\nconst clone = require(\"lodash/clone\");\nconst extend = require(\"lodash/extend\");\nconst filter = require(\"lodash/filter\");\nconst includes = require(\"lodash/includes\");\nconst isArray = require(\"lodash/isArray\");\nconst isEmpty = require(\"lodash/isEmpty\");\nconst isNumber = require(\"lodash/isNumber\");\nconst isObject = require(\"lodash/isObject\");\nconst isString = require(\"lodash/isString\");\nconst isUndefined = require(\"lodash/isUndefined\");\n\nconst smart_escape = require(\"./encoding/smart_escape\");\nconst consumeOption = require('./parsing/consumeOption');\nconst toArray = require('./parsing/toArray');\nlet { base64EncodeURL } = require('./encoding/base64EncodeURL');\nconst encodeDoubleArray = require('./encoding/encodeDoubleArray');\n\nconst config = require(\"../config\");\nconst generate_token = require(\"../auth_token\");\nconst utf8_encode = require('./utf8_encode');\nconst crc32 = require('./crc32');\nconst ensurePresenceOf = require('./ensurePresenceOf');\nconst ensureOption = require('./ensureOption').defaults(config());\nconst entries = require('./entries');\nconst isRemoteUrl = require('./isRemoteUrl');\nconst getSDKVersions = require('./encoding/sdkAnalytics/getSDKVersions');\nconst {getAnalyticsOptions, getSDKAnalyticsSignature} = require('cloudinary-core').Util;\n\nexports = module.exports;\nconst utils = module.exports;\n\ntry {\n  // eslint-disable-next-line global-require\n  utils.VERSION = require('../../package.json').version;\n} catch (error) {\n  utils.VERSION = '';\n}\n\nfunction generate_auth_token(options) {\n  let token_options = Object.assign({}, config().auth_token, options);\n  return generate_token(token_options);\n}\n\nexports.CF_SHARED_CDN = \"d3jpl91pxevbkh.cloudfront.net\";\nexports.OLD_AKAMAI_SHARED_CDN = \"cloudinary-a.akamaihd.net\";\nexports.AKAMAI_SHARED_CDN = \"res.cloudinary.com\";\nexports.SHARED_CDN = exports.AKAMAI_SHARED_CDN;\nexports.USER_AGENT = `CloudinaryNodeJS/${exports.VERSION} (Node ${process.versions.node})`;\n\n// Add platform information to the USER_AGENT header\n// This is intended for platform information and not individual applications!\nexports.userPlatform = \"\";\n\nfunction getUserAgent() {\n  return isEmpty(utils.userPlatform) ? `${utils.USER_AGENT}` : `${utils.userPlatform} ${utils.USER_AGENT}`;\n}\n\nconst {\n  DEFAULT_RESPONSIVE_WIDTH_TRANSFORMATION,\n  DEFAULT_POSTER_OPTIONS,\n  DEFAULT_VIDEO_SOURCE_TYPES,\n  CONDITIONAL_OPERATORS,\n  PREDEFINED_VARS,\n  LAYER_KEYWORD_PARAMS,\n  TRANSFORMATION_PARAMS,\n  SIMPLE_PARAMS,\n  UPLOAD_PREFIX,\n  SUPPORTED_SIGNATURE_ALGORITHMS,\n  DEFAULT_SIGNATURE_ALGORITHM\n} = require('./consts');\n\nfunction textStyle(layer) {\n  let keywords = [];\n  let style = \"\";\n\n  if (!isEmpty(layer.text_style)) {\n    return layer.text_style;\n  }\n  Object.keys(LAYER_KEYWORD_PARAMS).forEach((attr) => {\n    let default_value = LAYER_KEYWORD_PARAMS[attr];\n    let attr_value = layer[attr] || default_value;\n    if (attr_value !== default_value) {\n      keywords.push(attr_value);\n    }\n  });\n\n  Object.keys(layer).forEach((attr) => {\n    if (attr === \"letter_spacing\" || attr === \"line_spacing\") {\n      keywords.push(`${attr}_${layer[attr]}`);\n    }\n    if (attr === \"font_hinting\") {\n      keywords.push(`${attr.split(\"_\").pop()}_${layer[attr]}`);\n    }\n    if (attr === \"font_antialiasing\") {\n      keywords.push(`antialias_${layer[attr]}`);\n    }\n  });\n\n  if (layer.hasOwnProperty(\"font_size\" || \"font_family\") || !isEmpty(keywords)) {\n    if (!layer.font_size) throw `Must supply font_size for text in overlay/underlay`;\n    if (!layer.font_family) throw `Must supply font_family for text in overlay/underlay`;\n    keywords.unshift(layer.font_size);\n    keywords.unshift(layer.font_family);\n    style = compact(keywords).join(\"_\");\n  }\n  return style;\n}\n\n/**\n * Normalize an expression string, replace \"nice names\" with their coded values and spaces with \"_\"\n * e.g. `width > 0` => `w_lt_0`\n *\n * @param {String} expression An expression to be normalized\n * @return {Object|String} A normalized String of the input value if possible otherwise the value itself\n */\nfunction normalize_expression(expression) {\n  if (!isString(expression) || expression.length === 0 || expression.match(/^!.+!$/)) {\n    return expression;\n  }\n\n  const operators = \"\\\\|\\\\||>=|<=|&&|!=|>|=|<|/|-|\\\\^|\\\\+|\\\\*\";\n  const operatorsPattern = \"((\" + operators + \")(?=[ _]))\";\n  const operatorsReplaceRE = new RegExp(operatorsPattern, \"g\");\n  expression = expression.replace(operatorsReplaceRE, match => CONDITIONAL_OPERATORS[match]);\n\n  // Duplicate PREDEFINED_VARS to also include :{var_name} as well as {var_name}\n  // Example:\n  // -- PREDEFINED_VARS = ['foo']\n  // -- predefinedVarsPattern = ':foo|foo'\n  // It is done like this because node 6 does not support regex lookbehind\n  const predefinedVarsPattern = \"(\" + Object.keys(PREDEFINED_VARS).map(v => `:${v}|${v}`).join(\"|\") + \")\";\n  const userVariablePattern = '(\\\\$_*[^_ ]+)';\n  const variablesReplaceRE = new RegExp(`${userVariablePattern}|${predefinedVarsPattern}`, \"g\");\n  expression = expression.replace(variablesReplaceRE, (match) => (PREDEFINED_VARS[match] || match));\n\n  return expression.replace(/[ _]+/g, '_');\n}\n\n/**\n * Parse custom_function options\n * @private\n * @param {object|*} customFunction a custom function object containing function_type and source values\n * @return {string|*} custom_function transformation string\n */\nfunction process_custom_function(customFunction) {\n  if (!isObject(customFunction)) {\n    return customFunction;\n  }\n  if (customFunction.function_type === \"remote\") {\n    const encodedSource = base64EncodeURL(customFunction.source);\n\n    return [customFunction.function_type, encodedSource].join(\":\");\n  }\n  return [customFunction.function_type, customFunction.source].join(\":\");\n}\n\n/**\n * Parse custom_pre_function options\n * @private\n * @param {object|*} customPreFunction a custom function object containing function_type and source values\n * @return {string|*} custom_pre_function transformation string\n */\nfunction process_custom_pre_function(customPreFunction) {\n  let result = process_custom_function(customPreFunction);\n  return utils.isString(result) ? `pre:${result}` : null;\n}\n\n/**\n * Parse \"if\" parameter\n * Translates the condition if provided.\n * @private\n * @return {string} \"if_\" + ifValue\n */\nfunction process_if(ifValue) {\n  return ifValue ? \"if_\" + normalize_expression(ifValue) : ifValue;\n}\n\n/**\n * Parse layer options\n * @private\n * @param {object|*} layer The layer to parse.\n * @return {string} layer transformation string\n */\nfunction process_layer(layer) {\n  let result = '';\n  if (isPlainObject(layer)) {\n    if (layer.resource_type === \"fetch\" || (layer.url != null)) {\n      result = `fetch:${base64EncodeURL(layer.url)}`;\n    } else {\n      let public_id = layer.public_id;\n      let format = layer.format;\n      let resource_type = layer.resource_type || \"image\";\n      let type = layer.type || \"upload\";\n      let text = layer.text;\n      let style = null;\n      let components = [];\n      const noPublicId = isEmpty(public_id);\n      if (!noPublicId) {\n        public_id = public_id.replace(new RegExp(\"/\", 'g'), \":\");\n        if (format != null) {\n          public_id = `${public_id}.${format}`;\n        }\n      }\n      if (isEmpty(text) && resource_type !== \"text\") {\n        if (noPublicId) {\n          throw \"Must supply public_id for resource_type layer_parameter\";\n        }\n        if (resource_type === \"subtitles\") {\n          style = textStyle(layer);\n        }\n      } else {\n        resource_type = \"text\";\n        type = null;\n        // type is ignored for text layers\n        style = textStyle(layer);\n        if (!isEmpty(text)) {\n          const noStyle = isEmpty(style);\n          if (!(noPublicId || noStyle) || (noPublicId && noStyle)) {\n            throw \"Must supply either style parameters or a public_id when providing text parameter in a text overlay/underlay\";\n          }\n          let re = /\\$\\([a-zA-Z]\\w*\\)/g;\n          let start = 0;\n          let textSource = smart_escape(decodeURIComponent(text), /[,\\/]/g);\n          text = \"\";\n          for (let res = re.exec(textSource); res; res = re.exec(textSource)) {\n            text += smart_escape(textSource.slice(start, res.index));\n            text += res[0];\n            start = res.index + res[0].length;\n          }\n          text += encodeURIComponent(textSource.slice(start));\n        }\n      }\n      if (resource_type !== \"image\") {\n        components.push(resource_type);\n      }\n      if (type !== \"upload\") {\n        components.push(type);\n      }\n      components.push(style);\n      components.push(public_id);\n      components.push(text);\n      result = compact(components).join(\":\");\n    }\n  } else if (/^fetch:.+/.test(layer)) {\n    result = `fetch:${base64EncodeURL(layer.substr(6))}`;\n  } else {\n    result = layer;\n  }\n  return result;\n}\n\n/**\n * Parse radius options\n * @private\n * @param {Array<string|number>|string|number} radius The radius to parse\n * @return {string} radius transformation string\n */\nfunction process_radius(radius) {\n  if (!radius) {\n    return radius;\n  }\n  if (!isArray(radius)) {\n    radius = [radius];\n  }\n  if (radius.length === 0 || radius.length > 4) {\n    throw new Error(\"Radius array should contain between 1 and 4 values\");\n  }\n  if (radius.findIndex(x => x === null) >= 0) {\n    throw new Error(\"Corner: Cannot be null\");\n  }\n  return radius.map(normalize_expression).join(':');\n}\n\nfunction build_multi_and_sprite_params(tagOrOptions, options) {\n  let tag = null;\n  if (typeof tagOrOptions === 'string') {\n    tag = tagOrOptions;\n  } else {\n    if (isEmpty(options)) {\n      options = tagOrOptions;\n    } else {\n      throw new Error('First argument must be a tag when additional options are passed');\n    }\n    tag = null;\n  }\n  if (!options && !tag) {\n    throw new Error('Either tag or urls are required')\n  }\n  if (!options) {\n    options = {}\n  }\n  const urls = options.urls\n  const transformation = generate_transformation_string(extend({}, options, {\n    fetch_format: options.format\n  }));\n  return {\n    tag,\n    transformation,\n    urls,\n    timestamp: utils.timestamp(),\n    async: options.async,\n    notification_url: options.notification_url\n  };\n}\n\nfunction build_upload_params(options) {\n  let params = {\n    access_mode: options.access_mode,\n    allowed_formats: options.allowed_formats && toArray(options.allowed_formats).join(\",\"),\n    asset_folder: options.asset_folder,\n    async: utils.as_safe_bool(options.async),\n    backup: utils.as_safe_bool(options.backup),\n    callback: options.callback,\n    cinemagraph_analysis: utils.as_safe_bool(options.cinemagraph_analysis),\n    colors: utils.as_safe_bool(options.colors),\n    display_name: options.display_name,\n    discard_original_filename: utils.as_safe_bool(options.discard_original_filename),\n    eager: utils.build_eager(options.eager),\n    eager_async: utils.as_safe_bool(options.eager_async),\n    eager_notification_url: options.eager_notification_url,\n    eval: options.eval,\n    exif: utils.as_safe_bool(options.exif),\n    faces: utils.as_safe_bool(options.faces),\n    folder: options.folder,\n    format: options.format,\n    filename_override: options.filename_override,\n    image_metadata: utils.as_safe_bool(options.image_metadata),\n    invalidate: utils.as_safe_bool(options.invalidate),\n    moderation: options.moderation,\n    notification_url: options.notification_url,\n    overwrite: utils.as_safe_bool(options.overwrite),\n    phash: utils.as_safe_bool(options.phash),\n    proxy: options.proxy,\n    public_id: options.public_id,\n    public_id_prefix: options.public_id_prefix,\n    quality_analysis: utils.as_safe_bool(options.quality_analysis),\n    responsive_breakpoints: utils.generate_responsive_breakpoints_string(options.responsive_breakpoints),\n    return_delete_token: utils.as_safe_bool(options.return_delete_token),\n    timestamp: options.timestamp || exports.timestamp(),\n    transformation: utils.generate_transformation_string(clone(options)),\n    type: options.type,\n    unique_filename: utils.as_safe_bool(options.unique_filename),\n    upload_preset: options.upload_preset,\n    use_filename: utils.as_safe_bool(options.use_filename),\n    use_filename_as_display_name: utils.as_safe_bool(options.use_filename_as_display_name),\n    quality_override: options.quality_override,\n    accessibility_analysis: utils.as_safe_bool(options.accessibility_analysis),\n    use_asset_folder_as_public_id_prefix: utils.as_safe_bool(options.use_asset_folder_as_public_id_prefix)\n  };\n  return utils.updateable_resource_params(options, params);\n}\n\nfunction encode_key_value(arg) {\n  if (!isObject(arg)) { return arg; }\n  return entries(arg).map(([k, v]) => `${k}=${v}`).join('|');\n}\n\n\n/**\n * @description Escape = and | with two backslashes \\\\\n * @param {string|number} value\n * @return {string}\n */\nfunction escapeMetadataValue(value) {\n  return value.toString().replace(/([=|])/g, '\\\\$&');\n}\n\n\n/**\n *\n * @description Encode metadata fields based on incoming value.\n *              If array, escape as color_id=[\\\"green\\\",\\\"red\\\"]\n *              If string/number, escape as in_stock_id=50\n *\n *              Joins resulting values with a pipe:\n *              in_stock_id=50|color_id=[\\\"green\\\",\\\"red\\\"]\n *\n *              = and | and escaped by default (this can't be turned off)\n *\n * @param metadataObj\n * @return {string}\n */\nfunction encode_context(metadataObj) {\n  if (!isObject(metadataObj)) { return metadataObj; }\n\n  return entries(metadataObj).map(([key, value]) => {\n    // if string, simply parse the value and move on\n    if (isString(value)) {\n      return `${key}=${escapeMetadataValue(value)}`;\n\n      // If array, parse each item individually\n    } else if (isArray(value)) {\n      let values = value.map((innerVal) => {\n        return `\\\"${escapeMetadataValue(innerVal)}\\\"`\n      }).join(',');\n      return `${key}=[${values}]`\n      // if unknown, return the value as string\n    } else {\n      return value.toString();\n    }\n  }).join('|');\n}\n\nfunction build_eager(transformations) {\n  return toArray(transformations)\n    .map((transformation) => {\n      const transformationString = utils.generate_transformation_string(clone(transformation));\n      const format = transformation.format;\n      return format == null ? transformationString : `${transformationString}/${format}`;\n    }).join('|');\n}\n/**\n * Build the custom headers for the request\n * @private\n * @param headers\n * @return {Array<string>|object|string} An object of name and value,\n *         an array of header strings, or a string of headers\n */\nfunction build_custom_headers(headers) {\n  switch (true) {\n  case headers == null:\n    return void 0;\n  case isArray(headers):\n    return headers.join(\"\\n\");\n  case isObject(headers):\n    return entries(headers).map(([k, v]) => `${k}:${v}`).join(\"\\n\");\n  default:\n    return headers;\n  }\n}\n\nfunction generate_transformation_string(options) {\n  if (utils.isString(options)) {\n    return options;\n  }\n  if (isArray(options)) {\n    return options.map(t => utils.generate_transformation_string(clone(t))).filter(utils.present).join('/');\n  }\n\n  let responsive_width = consumeOption(options, \"responsive_width\", config().responsive_width);\n  let width = options.width;\n  let height = options.height;\n  let size = consumeOption(options, \"size\");\n  if (size) {\n    [width, height] = size.split(\"x\");\n    [options.width, options.height] = [width, height];\n  }\n  let has_layer = options.overlay || options.underlay;\n  let crop = consumeOption(options, \"crop\");\n  let angle = toArray(consumeOption(options, \"angle\")).join(\".\");\n  let no_html_sizes = has_layer || utils.present(angle) || crop === \"fit\" || crop === \"limit\" || responsive_width;\n  if (width && (width.toString().indexOf(\"auto\") === 0 || no_html_sizes || parseFloat(width) < 1)) {\n    delete options.width;\n  }\n  if (height && (no_html_sizes || parseFloat(height) < 1)) {\n    delete options.height;\n  }\n  let background = consumeOption(options, \"background\");\n  background = background && background.replace(/^#/, \"rgb:\");\n  let color = consumeOption(options, \"color\");\n  color = color && color.replace(/^#/, \"rgb:\");\n  let base_transformations = toArray(consumeOption(options, \"transformation\", []));\n  let named_transformation = [];\n  if (base_transformations.some(isObject)) {\n    base_transformations = base_transformations.map(tr => utils.generate_transformation_string(\n      isObject(tr) ? clone(tr) : { transformation: tr }\n    ));\n  } else {\n    named_transformation = base_transformations.join(\".\");\n    base_transformations = [];\n  }\n  let effect = consumeOption(options, \"effect\");\n  if (isArray(effect)) {\n    effect = effect.join(\":\");\n  } else if (isObject(effect)) {\n    effect = entries(effect).map(\n      ([key, value]) => `${key}:${value}`\n    );\n  }\n  let border = consumeOption(options, \"border\");\n  if (isObject(border)) {\n    border = `${border.width != null ? border.width : 2}px_solid_${(border.color != null ? border.color : \"black\").replace(/^#/, 'rgb:')}`;\n  } else if (/^\\d+$/.exec(border)) { // fallback to html border attributes\n    options.border = border;\n    border = void 0;\n  }\n  let flags = toArray(consumeOption(options, \"flags\")).join(\".\");\n  let dpr = consumeOption(options, \"dpr\", config().dpr);\n  if (options.offset != null) {\n    [options.start_offset, options.end_offset] = split_range(consumeOption(options, \"offset\"));\n  }\n  let overlay = process_layer(consumeOption(options, \"overlay\"));\n  let radius = process_radius(consumeOption(options, \"radius\"));\n  let underlay = process_layer(consumeOption(options, \"underlay\"));\n  let ifValue = process_if(consumeOption(options, \"if\"));\n  let custom_function = process_custom_function(consumeOption(options, \"custom_function\"));\n  let custom_pre_function = process_custom_pre_function(consumeOption(options, \"custom_pre_function\"));\n  let fps = consumeOption(options, 'fps');\n  if (isArray(fps)) {\n    fps = fps.join('-');\n  }\n  let params = {\n    a: normalize_expression(angle),\n    ar: normalize_expression(consumeOption(options, \"aspect_ratio\")),\n    b: background,\n    bo: border,\n    c: crop,\n    co: color,\n    dpr: normalize_expression(dpr),\n    e: normalize_expression(effect),\n    fl: flags,\n    fn: custom_function || custom_pre_function,\n    fps: fps,\n    h: normalize_expression(height),\n    ki: normalize_expression(consumeOption(options, \"keyframe_interval\")),\n    l: overlay,\n    o: normalize_expression(consumeOption(options, \"opacity\")),\n    q: normalize_expression(consumeOption(options, \"quality\")),\n    r: radius,\n    t: named_transformation,\n    u: underlay,\n    w: normalize_expression(width),\n    x: normalize_expression(consumeOption(options, \"x\")),\n    y: normalize_expression(consumeOption(options, \"y\")),\n    z: normalize_expression(consumeOption(options, \"zoom\"))\n  };\n\n  SIMPLE_PARAMS.forEach(([name, short]) => {\n    let value = consumeOption(options, name);\n    if (value !== undefined) {\n      params[short] = value;\n    }\n  });\n  if (params.vc != null) {\n    params.vc = process_video_params(params.vc);\n  }\n  [\"so\", \"eo\", \"du\"].forEach((short) => {\n    if (params[short] !== undefined) {\n      params[short] = norm_range_value(params[short]);\n    }\n  });\n\n  let variablesParam = consumeOption(options, \"variables\", []);\n  let variables = entries(options)\n    .filter(([key, value]) => key.startsWith('$'))\n    .map(([key, value]) => {\n      delete options[key];\n      return `${key}_${normalize_expression(value)}`;\n    }).sort().concat(\n      variablesParam.map(([name, value]) => `${name}_${normalize_expression(value)}`)\n    ).join(',');\n\n  let transformations = entries(params)\n    .filter(([key, value]) => utils.present(value))\n    .map(([key, value]) => key + '_' + value)\n    .sort()\n    .join(',');\n\n  let raw_transformation = consumeOption(options, 'raw_transformation');\n  transformations = compact([ifValue, variables, transformations, raw_transformation]).join(\",\");\n  base_transformations.push(transformations);\n  transformations = base_transformations;\n  if (responsive_width) {\n    let responsive_width_transformation = config().responsive_width_transformation\n      || DEFAULT_RESPONSIVE_WIDTH_TRANSFORMATION;\n\n    transformations.push(utils.generate_transformation_string(clone(responsive_width_transformation)));\n  }\n  if (String(width).startsWith(\"auto\") || responsive_width) {\n    options.responsive = true;\n  }\n  if (dpr === \"auto\") {\n    options.hidpi = true;\n  }\n  return filter(transformations, utils.present).join(\"/\");\n}\n\nfunction updateable_resource_params(options, params = {}) {\n  if (options.access_control != null) {\n    params.access_control = utils.jsonArrayParam(options.access_control);\n  }\n  if (options.auto_tagging != null) {\n    params.auto_tagging = options.auto_tagging;\n  }\n  if (options.background_removal != null) {\n    params.background_removal = options.background_removal;\n  }\n  if (options.categorization != null) {\n    params.categorization = options.categorization;\n  }\n  if (options.context != null) {\n    params.context = utils.encode_context(options.context);\n  }\n  if (options.metadata != null) {\n    params.metadata = utils.encode_context(options.metadata);\n  }\n  if (options.custom_coordinates != null) {\n    params.custom_coordinates = encodeDoubleArray(options.custom_coordinates);\n  }\n  if (options.detection != null) {\n    params.detection = options.detection;\n  }\n  if (options.face_coordinates != null) {\n    params.face_coordinates = encodeDoubleArray(options.face_coordinates);\n  }\n  if (options.headers != null) {\n    params.headers = utils.build_custom_headers(options.headers);\n  }\n  if (options.notification_url != null) {\n    params.notification_url = options.notification_url;\n  }\n  if (options.ocr != null) {\n    params.ocr = options.ocr;\n  }\n  if (options.raw_convert != null) {\n    params.raw_convert = options.raw_convert;\n  }\n  if (options.similarity_search != null) {\n    params.similarity_search = options.similarity_search;\n  }\n  if (options.tags != null) {\n    params.tags = toArray(options.tags).join(\",\");\n  }\n  if (options.quality_override != null) {\n    params.quality_override = options.quality_override;\n  }\n  if (options.asset_folder != null){\n    params.asset_folder = options.asset_folder;\n  }\n  if (options.display_name != null){\n    params.display_name = options.display_name;\n  }\n  if (options.unique_display_name != null){\n    params.unique_display_name = options.unique_display_name;\n  }\n  return params;\n}\n\n/**\n * A list of keys used by the url() function.\n * @private\n */\nconst URL_KEYS = [\n  'api_secret',\n  'auth_token',\n  'cdn_subdomain',\n  'cloud_name',\n  'cname',\n  'format',\n  'long_url_signature',\n  'private_cdn',\n  'resource_type',\n  'secure',\n  'secure_cdn_subdomain',\n  'secure_distribution',\n  'shorten',\n  'sign_url',\n  'ssl_detected',\n  'type',\n  'url_suffix',\n  'use_root_path',\n  'version'\n];\n\n/**\n * Create a new object with only URL parameters\n * @param {object} options The source object\n * @return {Object} An object containing only URL parameters\n */\n\nfunction extractUrlParams(options) {\n  return pickOnlyExistingValues(options, ...URL_KEYS);\n}\n\n/**\n * Create a new object with only transformation parameters\n * @param {object} options The source object\n * @return {Object} An object containing only transformation parameters\n */\n\nfunction extractTransformationParams(options) {\n  return pickOnlyExistingValues(options, ...TRANSFORMATION_PARAMS);\n}\n\n/**\n * Handle the format parameter for fetch urls\n * @private\n * @param options url and transformation options. This argument may be changed by the function!\n */\n\nfunction patchFetchFormat(options = {}) {\n  if (options.type === \"fetch\") {\n    if (options.fetch_format == null) {\n      options.fetch_format = consumeOption(options, \"format\");\n    }\n  }\n}\n\nfunction url(public_id, options = {}) {\n  let signature, source_to_sign;\n  utils.patchFetchFormat(options);\n  let type = consumeOption(options, \"type\", null);\n  let transformation = utils.generate_transformation_string(options);\n\n  let resource_type = consumeOption(options, \"resource_type\", \"image\");\n  let version = consumeOption(options, \"version\");\n  let force_version = consumeOption(options, \"force_version\", config().force_version);\n  if (force_version == null) {\n    force_version = true;\n  }\n  let long_url_signature = !!consumeOption(options, \"long_url_signature\", config().long_url_signature);\n  let format = consumeOption(options, \"format\");\n  let cloud_name = consumeOption(options, \"cloud_name\", config().cloud_name);\n  if (!cloud_name) {\n    throw \"Unknown cloud_name\";\n  }\n  let private_cdn = consumeOption(options, \"private_cdn\", config().private_cdn);\n  let secure_distribution = consumeOption(options, \"secure_distribution\", config().secure_distribution);\n  let secure = consumeOption(options, \"secure\", null);\n  let ssl_detected = consumeOption(options, \"ssl_detected\", config().ssl_detected);\n  if (secure === null) {\n    secure = ssl_detected || config().secure;\n  }\n  let cdn_subdomain = consumeOption(options, \"cdn_subdomain\", config().cdn_subdomain);\n  let secure_cdn_subdomain = consumeOption(options, \"secure_cdn_subdomain\", config().secure_cdn_subdomain);\n  let cname = consumeOption(options, \"cname\", config().cname);\n  let shorten = consumeOption(options, \"shorten\", config().shorten);\n  let sign_url = consumeOption(options, \"sign_url\", config().sign_url);\n  let api_secret = consumeOption(options, \"api_secret\", config().api_secret);\n  let url_suffix = consumeOption(options, \"url_suffix\");\n  let use_root_path = consumeOption(options, \"use_root_path\", config().use_root_path);\n  let signature_algorithm = consumeOption(options, \"signature_algorithm\", config().signature_algorithm || DEFAULT_SIGNATURE_ALGORITHM);\n  if (long_url_signature) {\n    signature_algorithm = 'sha256';\n  }\n  let auth_token = consumeOption(options, \"auth_token\");\n  if (auth_token !== false) {\n    auth_token = exports.merge(config().auth_token, auth_token);\n  }\n  let preloaded = /^(image|raw)\\/([a-z0-9_]+)\\/v(\\d+)\\/([^#]+)$/.exec(public_id);\n  if (preloaded) {\n    resource_type = preloaded[1];\n    type = preloaded[2];\n    version = preloaded[3];\n    public_id = preloaded[4];\n  }\n  let original_source = public_id;\n  if (public_id == null) {\n    return original_source;\n  }\n  public_id = public_id.toString();\n  if (type === null && public_id.match(/^https?:\\//i)) {\n    return original_source;\n  }\n  [resource_type, type] = finalize_resource_type(resource_type, type, url_suffix, use_root_path, shorten);\n  [public_id, source_to_sign] = finalize_source(public_id, format, url_suffix);\n\n  if (version == null && force_version && source_to_sign.indexOf(\"/\") >= 0 && !source_to_sign.match(/^v[0-9]+/) && !source_to_sign.match(/^https?:\\//)) {\n    version = 1;\n  }\n  if (version != null) {\n    version = `v${version}`;\n  } else {\n    version = null;\n  }\n\n  transformation = transformation.replace(/([^:])\\/\\//g, '$1/');\n  if (sign_url && isEmpty(auth_token)) {\n    let to_sign = [transformation, source_to_sign].filter(function (part) {\n      return (part != null) && part !== '';\n    }).join('/');\n    try {\n      for (let i = 0; to_sign !== decodeURIComponent(to_sign) && i < 10; i++) {\n        to_sign = decodeURIComponent(to_sign);\n      }\n      // eslint-disable-next-line no-empty\n    } catch (error) {\n    }\n    let hash = computeHash(to_sign + api_secret, signature_algorithm, 'base64');\n    signature = hash.replace(/\\//g, '_').replace(/\\+/g, '-').substring(0, long_url_signature ? 32 : 8);\n    signature = `s--${signature}--`;\n  }\n  let prefix = unsigned_url_prefix(\n    public_id,\n    cloud_name,\n    private_cdn,\n    cdn_subdomain,\n    secure_cdn_subdomain,\n    cname,\n    secure,\n    secure_distribution\n  );\n  let resultUrl = [prefix, resource_type, type, signature, transformation, version, public_id].filter(function (part) {\n    return (part != null) && part !== '';\n  }).join('/').replace(/ /g, '%20');\n  if (sign_url && !isEmpty(auth_token)) {\n    auth_token.url = urlParse(resultUrl).path;\n    let token = generate_token(auth_token);\n    resultUrl += `?${token}`;\n  }\n\n  let urlAnalytics = ensureOption(options, 'urlAnalytics', false);\n\n  if (urlAnalytics === true) {\n    let sdkVersions = getSDKVersions();\n    let analyticsOptions = getAnalyticsOptions(Object.assign({}, options, sdkVersions));\n\n    let sdkAnalyticsSignature = getSDKAnalyticsSignature(analyticsOptions);\n\n    // url might already have a '?' query param\n    let appender = '?';\n    if (resultUrl.indexOf('?') >= 0) {\n      appender = '&';\n    }\n    resultUrl = `${resultUrl}${appender}_s=${sdkAnalyticsSignature}`;\n  }\n\n  return resultUrl;\n}\n\nfunction video_url(public_id, options) {\n  options = extend({\n    resource_type: 'video'\n  }, options);\n  return utils.url(public_id, options);\n}\n\nfunction finalize_source(source, format, url_suffix) {\n  let source_to_sign;\n  source = source.replace(/([^:])\\/\\//g, '$1/');\n  if (source.match(/^https?:\\//i)) {\n    source = smart_escape(source);\n    source_to_sign = source;\n  } else {\n    source = encodeURIComponent(decodeURIComponent(source)).replace(/%3A/g, \":\").replace(/%2F/g, \"/\");\n    source_to_sign = source;\n    if (url_suffix) {\n      if (url_suffix.match(/[\\.\\/]/)) {\n        throw new Error('url_suffix should not include . or /');\n      }\n      source = source + '/' + url_suffix;\n    }\n    if (format != null) {\n      source = source + '.' + format;\n      source_to_sign = source_to_sign + '.' + format;\n    }\n  }\n  return [source, source_to_sign];\n}\n\nfunction video_thumbnail_url(public_id, options) {\n  options = extend({}, DEFAULT_POSTER_OPTIONS, options);\n  return utils.url(public_id, options);\n}\n\nfunction finalize_resource_type(resource_type, type, url_suffix, use_root_path, shorten) {\n  if (type == null) {\n    type = 'upload';\n  }\n  if (url_suffix != null) {\n    if (resource_type === 'image' && type === 'upload') {\n      resource_type = \"images\";\n      type = null;\n    } else if (resource_type === 'image' && type === 'private') {\n      resource_type = 'private_images';\n      type = null;\n    } else if (resource_type === 'image' && type === 'authenticated') {\n      resource_type = 'authenticated_images';\n      type = null;\n    } else if (resource_type === 'raw' && type === 'upload') {\n      resource_type = 'files';\n      type = null;\n    } else if (resource_type === 'video' && type === 'upload') {\n      resource_type = 'videos';\n      type = null;\n    } else {\n      throw new Error(\"URL Suffix only supported for image/upload, image/private, image/authenticated, video/upload and raw/upload\");\n    }\n  }\n  if (use_root_path) {\n    if ((resource_type === 'image' && type === 'upload') || (resource_type === 'images' && (type == null))) {\n      resource_type = null;\n      type = null;\n    } else {\n      throw new Error(\"Root path only supported for image/upload\");\n    }\n  }\n  if (shorten && resource_type === 'image' && type === 'upload') {\n    resource_type = 'iu';\n    type = null;\n  }\n  return [resource_type, type];\n}\n// cdn_subdomain and secure_cdn_subdomain\n// 1) Customers in shared distribution (e.g. res.cloudinary.com)\n//    if cdn_domain is true uses res-[1-5].cloudinary.com for both http and https.\n//    Setting secure_cdn_subdomain to false disables this for https.\n// 2) Customers with private cdn\n//    if cdn_domain is true uses cloudname-res-[1-5].cloudinary.com for http\n//    if secure_cdn_domain is true uses cloudname-res-[1-5].cloudinary.com for https\n//      (please contact support if you require this)\n// 3) Customers with cname\n//    if cdn_domain is true uses a[1-5].cname for http.\n//    For https, uses the same naming scheme as 1 for shared distribution and as 2 for private distribution.\n\nfunction unsigned_url_prefix(\n  source,\n  cloud_name,\n  private_cdn,\n  cdn_subdomain,\n  secure_cdn_subdomain,\n  cname,\n  secure,\n  secure_distribution\n) {\n  let prefix;\n  if (cloud_name.indexOf(\"/\") === 0) {\n    return '/res' + cloud_name;\n  }\n  let shared_domain = !private_cdn;\n  if (secure) {\n    if ((secure_distribution == null) || secure_distribution === exports.OLD_AKAMAI_SHARED_CDN) {\n      secure_distribution = private_cdn ? cloud_name + \"-res.cloudinary.com\" : exports.SHARED_CDN;\n    }\n    if (shared_domain == null) {\n      shared_domain = secure_distribution === exports.SHARED_CDN;\n    }\n    if ((secure_cdn_subdomain == null) && shared_domain) {\n      secure_cdn_subdomain = cdn_subdomain;\n    }\n    if (secure_cdn_subdomain) {\n      secure_distribution = secure_distribution.replace('res.cloudinary.com', 'res-' + ((crc32(source) % 5) + 1 + '.cloudinary.com'));\n    }\n    prefix = 'https://' + secure_distribution;\n  } else if (cname) {\n    let subdomain = cdn_subdomain ? 'a' + ((crc32(source) % 5) + 1) + '.' : '';\n    prefix = 'http://' + subdomain + cname;\n  } else {\n    let cdn_part = private_cdn ? cloud_name + '-' : '';\n    let subdomain_part = cdn_subdomain ? '-' + ((crc32(source) % 5) + 1) : '';\n    let host = [cdn_part, 'res', subdomain_part, '.cloudinary.com'].join('');\n    prefix = 'http://' + host;\n  }\n  if (shared_domain) {\n    prefix += '/' + cloud_name;\n  }\n  return prefix;\n}\n\nfunction base_api_url(path= [], options = {}) {\n  let cloudinary = ensureOption(options, \"upload_prefix\", UPLOAD_PREFIX);\n  let cloud_name = ensureOption(options, \"cloud_name\");\n  let encode_path = unencoded_path => encodeURIComponent(unencoded_path).replace(\"'\", '%27');\n  let encoded_path = Array.isArray(path) ? path.map(encode_path) : encode_path(path);\n  return [cloudinary, \"v1_1\", cloud_name].concat(encoded_path).join(\"/\");\n}\n\nfunction api_url(action = 'upload', options = {}) {\n  let resource_type = options.resource_type || \"image\";\n  return base_api_url([resource_type, action], options);\n}\n\nfunction random_public_id() {\n  return crypto.randomBytes(12).toString('base64').replace(/[^a-z0-9]/g, \"\");\n}\n\nfunction signed_preloaded_image(result) {\n  return `${result.resource_type}/upload/v${result.version}/${filter([result.public_id, result.format], utils.present).join(\".\")}#${result.signature}`;\n}\n\nfunction api_sign_request(params_to_sign, api_secret) {\n  let to_sign = entries(params_to_sign).filter(\n    ([k, v]) => utils.present(v)\n  ).map(\n    ([k, v]) => `${k}=${toArray(v).join(\",\")}`\n  ).sort().join(\"&\");\n  return computeHash(to_sign + api_secret, config().signature_algorithm || DEFAULT_SIGNATURE_ALGORITHM, 'hex');\n}\n\n/**\n * Computes hash from input string using specified algorithm.\n * @private\n * @param {string} input string which to compute hash from\n * @param {string} signature_algorithm algorithm to use for computing hash\n * @param {string} encoding type of encoding\n * @return {string} computed hash value\n */\nfunction computeHash(input, signature_algorithm, encoding) {\n  if (!SUPPORTED_SIGNATURE_ALGORITHMS.includes(signature_algorithm)) {\n    throw new Error(`Signature algorithm ${signature_algorithm} is not supported. Supported algorithms: ${SUPPORTED_SIGNATURE_ALGORITHMS.join(', ')}`);\n  }\n  let hash = crypto.createHash(signature_algorithm);\n  hash.update(utf8_encode(input), 'binary');\n  return hash.digest(encoding);\n}\n\nfunction clear_blank(hash) {\n  let filtered_hash = {};\n  entries(hash).filter(\n    ([k, v]) => utils.present(v)\n  ).forEach(\n    ([k, v]) => { filtered_hash[k] = v; }\n  );\n  return filtered_hash;\n}\n\nfunction merge(hash1, hash2) {\n  return { ...hash1, ...hash2 };\n}\n\nfunction sign_request(params, options = {}) {\n  let apiKey = ensureOption(options, 'api_key');\n  let apiSecret = ensureOption(options, 'api_secret');\n  params = exports.clear_blank(params);\n  params.signature = exports.api_sign_request(params, apiSecret);\n  params.api_key = apiKey;\n  return params;\n}\n\nfunction webhook_signature(data, timestamp, options = {}) {\n  ensurePresenceOf({ data, timestamp });\n\n  let api_secret = ensureOption(options, 'api_secret');\n  let signature_algorithm = ensureOption(options, 'signature_algorithm', DEFAULT_SIGNATURE_ALGORITHM);\n  return computeHash(data + timestamp + api_secret, signature_algorithm, 'hex');\n}\n\n/**\n * Verifies the authenticity of a notification signature\n *\n * @param {string} body JSON of the request's body\n * @param {number} timestamp Unix timestamp in seconds. Can be retrieved from the X-Cld-Timestamp header\n * @param {string} signature Actual signature. Can be retrieved from the X-Cld-Signature header\n * @param {number} [valid_for=7200] The desired time in seconds for considering the request valid\n *\n * @return {boolean}\n */\nfunction verifyNotificationSignature(body, timestamp, signature, valid_for = 7200) {\n  // verify that signature is valid for the given timestamp\n  if (timestamp < Math.round(Date.now() / 1000) - valid_for) {\n    return false;\n  }\n  const payload_hash = utils.webhook_signature(body, timestamp, {\n    api_secret: config().api_secret,\n    signature_algorithm: config().signature_algorithm\n  });\n  return signature === payload_hash;\n}\n\nfunction process_request_params(params, options) {\n  if ((options.unsigned != null) && options.unsigned) {\n    params = exports.clear_blank(params);\n    delete params.timestamp;\n  } else if (options.oauth_token || config().oauth_token) {\n    params = exports.clear_blank(params);\n  } else if (options.signature) {\n    params = exports.clear_blank(options);\n  } else {\n    params = exports.sign_request(params, options);\n  }\n\n  return params;\n}\n\nfunction private_download_url(public_id, format, options = {}) {\n  let params = exports.sign_request({\n    timestamp: options.timestamp || exports.timestamp(),\n    public_id: public_id,\n    format: format,\n    type: options.type,\n    attachment: options.attachment,\n    expires_at: options.expires_at\n  }, options);\n  return exports.api_url(\"download\", options) + \"?\" + querystring.stringify(params);\n}\n\n/**\n * Utility method that uses the deprecated ZIP download API.\n * @deprecated Replaced by {download_zip_url} that uses the more advanced and robust archive generation and download API\n */\n\nfunction zip_download_url(tag, options = {}) {\n  let params = exports.sign_request({\n    timestamp: options.timestamp || exports.timestamp(),\n    tag: tag,\n    transformation: utils.generate_transformation_string(options)\n  }, options);\n  return exports.api_url(\"download_tag.zip\", options) + \"?\" + hashToQuery(params);\n}\n\n/**\n * The returned url should allow downloading the backedup asset based on the\n * version and asset id\n * asset and version id are returned with resource(<PUBLIC_ID1>, { versions: true })\n * @param asset_id\n * @param version_id\n * @param options\n * @returns {string }\n */\nfunction download_backedup_asset(asset_id, version_id, options = {}) {\n  let params = exports.sign_request({\n    timestamp: options.timestamp || exports.timestamp(),\n    asset_id: asset_id,\n    version_id: version_id\n  }, options);\n  return exports.base_api_url(['download_backup'], options) + \"?\" + hashToQuery(params);\n}\n\n/**\n * Utility method to create a signed URL for specified resources.\n * @param action\n * @param params\n * @param options\n */\nfunction api_download_url(action, params, options) {\n  const download_params = {...params, mode: \"download\"}\n  let cloudinary_params = exports.sign_request(download_params, options);\n  return exports.api_url(action, options) + \"?\" + hashToQuery(cloudinary_params);\n}\n\n/**\n * Returns a URL that when invokes creates an archive and returns it.\n * @param {object} options\n * @param {string} [options.resource_type=\"image\"] The resource type of files to include in the archive.\n *   Must be one of :image | :video | :raw\n * @param {string} [options.type=\"upload\"] The specific file type of resources: :upload|:private|:authenticated\n * @param {string|Array} [options.tags] list of tags to include in the archive\n * @param {string|Array<string>} [options.public_ids] list of public_ids to include in the archive\n * @param {string|Array<string>} [options.prefixes]  list of prefixes of public IDs (e.g., folders).\n * @param {string|Array<string>} [options.fully_qualified_public_ids] list of fully qualified public_ids to include\n *   in the archive.\n * @param {string|Array<string>} [options.transformations]  list of transformations.\n *   The derived images of the given transformations are included in the archive. Using the string representation of\n *   multiple chained transformations as we use for the 'eager' upload parameter.\n * @param {string} [options.mode=\"create\"] return the generated archive file or to store it as a raw resource and\n *   return a JSON with URLs for accessing the archive. Possible values: :download, :create\n * @param {string} [options.target_format=\"zip\"]\n * @param {string} [options.target_public_id]  public ID of the generated raw resource.\n *   Relevant only for the create mode. If not specified, random public ID is generated.\n * @param {boolean} [options.flatten_folders=false] If true, flatten public IDs with folders to be in the root\n *   of the archive. Add numeric counter to the file name in case of a name conflict.\n * @param {boolean} [options.flatten_transformations=false] If true, and multiple transformations are given,\n *   flatten the folder structure of derived images and store the transformation details on the file name instead.\n * @param {boolean} [options.use_original_filename] Use the original file name of included images\n *   (if available) instead of the public ID.\n * @param {boolean} [options.async=false] If true, return immediately and perform archive creation in the background.\n *   Relevant only for the create mode.\n * @param {string} [options.notification_url] URL to send an HTTP post request (webhook) to when the\n *   archive creation is completed.\n * @param {string|Array<string>} [options.target_tags=] Allows assigning one or more tags to the generated archive file\n *   (for later housekeeping via the admin API).\n * @param {string} [options.keep_derived=false] keep the derived images used for generating the archive\n * @return {String} archive url\n */\nfunction download_archive_url(options = {}) {\n  const params = exports.archive_params(merge(options, {\n    mode: \"download\"\n  }))\n  return api_download_url(\"generate_archive\", params, options)\n}\n\n/**\n * Returns a URL that when invokes creates an zip archive and returns it.\n * @see download_archive_url\n */\n\nfunction download_zip_url(options = {}) {\n  return exports.download_archive_url(merge(options, {\n    target_format: \"zip\"\n  }));\n}\n\n/**\n * Creates and returns a URL that when invoked creates an archive of a folder\n * @param {string} folder_path Full path (from the root) of the folder to download\n * @param {object} options Additional options\n * @returns {string} Url for downloading an archive of a folder\n */\nfunction download_folder(folder_path, options = {}) {\n  options.resource_type = options.resource_type || \"all\";\n  options.prefixes = folder_path;\n  let cloudinary_params = exports.sign_request(exports.archive_params(merge(options, {\n    mode: \"download\"\n  })), options);\n  return exports.api_url(\"generate_archive\", options) + \"?\" + hashToQuery(cloudinary_params);\n}\n\n/**\n * Render the key/value pair as an HTML tag attribute\n * @private\n * @param {string} key\n * @param {string|boolean|number} [value]\n * @return {string} A string representing the HTML attribute\n */\nfunction join_pair(key, value) {\n  if (!value) { return void 0; }\n  return value === true ? key : key + \"='\" + value + \"'\";\n}\n\n/**\n * If the given value is a string, replaces single or double quotes with character entities\n * @private\n * @param {*} value The string to encode quotes in\n * @return {*} Encoded string or original value if not a string\n */\nfunction escapeQuotes(value) {\n  return isString(value) ? value.replace(/\\\"/g, '&#34;').replace(/\\'/g, '&#39;') : value;\n}\n\n/**\n *\n * @param attrs\n * @return {*}\n */\nexports.html_attrs = function html_attrs(attrs) {\n  return filter(map(attrs, function (value, key) {\n    return join_pair(key, escapeQuotes(value));\n  })).sort().join(\" \");\n};\n\nconst CLOUDINARY_JS_CONFIG_PARAMS = ['api_key', 'cloud_name', 'private_cdn', 'secure_distribution', 'cdn_subdomain'];\n\nfunction cloudinary_js_config() {\n  let params = pickOnlyExistingValues(config(), ...CLOUDINARY_JS_CONFIG_PARAMS);\n  return `<script type='text/javascript'>\\n$.cloudinary.config(${JSON.stringify(params)});\\n</script>`;\n}\n\nfunction v1_result_adapter(callback) {\n  if (callback == null) { return undefined; }\n  return function (result) {\n    if (result.error != null) {\n      return callback(result.error);\n    }\n    return callback(void 0, result);\n  };\n}\n\nfunction v1_adapter(name, num_pass_args, v1) {\n  return function (...args) {\n    let pass_args = take(args, num_pass_args);\n    let options = args[num_pass_args];\n    let callback = args[num_pass_args + 1];\n    if ((callback == null) && isFunction(options)) {\n      callback = options;\n      options = {};\n    }\n    callback = v1_result_adapter(callback);\n    args = pass_args.concat([callback, options]);\n    return v1[name].apply(this, args);\n  };\n}\n\nfunction v1_adapters(exports, v1, mapping) {\n  return Object.keys(mapping).map((name) => {\n    let num_pass_args = mapping[name];\n    exports[name] = v1_adapter(name, num_pass_args, v1);\n    return exports[name];\n  });\n}\n\nfunction as_safe_bool(value) {\n  if (value == null) {\n    return void 0;\n  }\n  if (value === true || value === 'true' || value === '1') {\n    value = 1;\n  }\n  if (value === false || value === 'false' || value === '0') {\n    value = 0;\n  }\n  return value;\n}\n\nconst NUMBER_PATTERN = \"([0-9]*)\\\\.([0-9]+)|([0-9]+)\";\n\nconst OFFSET_ANY_PATTERN = `(${NUMBER_PATTERN})([%pP])?`;\nconst RANGE_VALUE_RE = RegExp(`^${OFFSET_ANY_PATTERN}$`);\nconst OFFSET_ANY_PATTERN_RE = RegExp(`(${OFFSET_ANY_PATTERN})\\\\.\\\\.(${OFFSET_ANY_PATTERN})`);\n\n// Split a range into the start and end values\nfunction split_range(range) { // :nodoc:\n  switch (range.constructor) {\n  case String:\n    if (!OFFSET_ANY_PATTERN_RE.test(range)) {\n      return range;\n    }\n    return range.split(\"..\");\n  case Array:\n    return [first(range), last(range)];\n  default:\n    return [null, null];\n  }\n}\n\nfunction norm_range_value(value) { // :nodoc:\n  let offset = String(value).match(RANGE_VALUE_RE);\n  if (offset) {\n    let modifier = offset[5] ? 'p' : '';\n    value = `${offset[1] || offset[4]}${modifier}`;\n  }\n  return value;\n}\n\n/**\n * A video codec parameter can be either a String or a Hash.\n * @param {Object} param <code>vc_<codec>[ : <profile> : [<level>]]</code>\n *                       or <code>{ codec: 'h264', profile: 'basic', level: '3.1' }</code>\n * @return {String} <code><codec> : <profile> : [<level>]]</code> if a Hash was provided\n *                   or the param if a String was provided.\n *                   Returns null if param is not a Hash or String\n */\nfunction process_video_params(param) {\n  switch (param.constructor) {\n  case Object: {\n    let video = \"\";\n    if ('codec' in param) {\n      video = param.codec;\n      if ('profile' in param) {\n        video += \":\" + param.profile;\n        if ('level' in param) {\n          video += \":\" + param.level;\n        }\n      }\n    }\n    return video;\n  }\n  case String:\n    return param;\n  default:\n    return null;\n  }\n}\n/**\n * Returns a Hash of parameters used to create an archive\n * @private\n * @param {object} options\n * @return {object} Archive API parameters\n */\n\nfunction archive_params(options = {}) {\n  return {\n    allow_missing: exports.as_safe_bool(options.allow_missing),\n    async: exports.as_safe_bool(options.async),\n    expires_at: options.expires_at,\n    flatten_folders: exports.as_safe_bool(options.flatten_folders),\n    flatten_transformations: exports.as_safe_bool(options.flatten_transformations),\n    keep_derived: exports.as_safe_bool(options.keep_derived),\n    mode: options.mode,\n    notification_url: options.notification_url,\n    prefixes: options.prefixes && toArray(options.prefixes),\n    fully_qualified_public_ids: options.fully_qualified_public_ids && toArray(options.fully_qualified_public_ids),\n    public_ids: options.public_ids && toArray(options.public_ids),\n    skip_transformation_name: exports.as_safe_bool(options.skip_transformation_name),\n    tags: options.tags && toArray(options.tags),\n    target_format: options.target_format,\n    target_public_id: options.target_public_id,\n    target_tags: options.target_tags && toArray(options.target_tags),\n    timestamp: options.timestamp || exports.timestamp(),\n    transformations: utils.build_eager(options.transformations),\n    type: options.type,\n    use_original_filename: exports.as_safe_bool(options.use_original_filename)\n  };\n}\n\nexports.create_source_tag = function create_source_tag(src, source_type, codecs = null) {\n  let video_type = source_type === 'ogv' ? 'ogg' : source_type;\n  let mime_type = `video/${video_type}`;\n  if (!isEmpty(codecs)) {\n    let codecs_str = isArray(codecs) ? codecs.join(', ') : codecs;\n    mime_type += `; codecs=${codecs_str}`;\n  }\n  return `<source ${utils.html_attrs({ src, type: mime_type })}>`;\n};\n\nfunction build_explicit_api_params(public_id, options = {}) {\n  return [exports.build_upload_params(extend({}, { public_id }, options))];\n}\n\nfunction generate_responsive_breakpoints_string(breakpoints) {\n  if (breakpoints == null) {\n    return null;\n  }\n  breakpoints = clone(breakpoints);\n  if (!isArray(breakpoints)) {\n    breakpoints = [breakpoints];\n  }\n  for (let j = 0; j < breakpoints.length; j++) {\n    let breakpoint_settings = breakpoints[j];\n    if (breakpoint_settings != null) {\n      if (breakpoint_settings.transformation) {\n        breakpoint_settings.transformation = utils.generate_transformation_string(\n          clone(breakpoint_settings.transformation)\n        );\n      }\n    }\n  }\n  return JSON.stringify(breakpoints);\n}\n\nfunction build_streaming_profiles_param(options = {}) {\n  let params = pickOnlyExistingValues(options, \"display_name\", \"representations\");\n  if (isArray(params.representations)) {\n    params.representations = JSON.stringify(params.representations.map(\n      r => ({\n        transformation: utils.generate_transformation_string(r.transformation)\n      })\n    ));\n  }\n  return params;\n}\n\nfunction hashToParameters(hash) {\n  return entries(hash).reduce((parameters, [key, value]) => {\n    if (isArray(value)) {\n      key = key.endsWith('[]') ? key : key + '[]';\n      const items = value.map(v => [key, v]);\n      parameters = parameters.concat(items);\n    } else {\n      parameters.push([key, value]);\n    }\n    return parameters;\n  }, []);\n}\n\n/**\n * Convert a hash of values to a URI query string.\n * Array values are spread as individual parameters.\n * @param {object} hash Key-value parameters\n * @return {string} A URI query string.\n */\nfunction hashToQuery(hash) {\n  return hashToParameters(hash).map(\n    ([key, value]) => `${querystring.escape(key)}=${querystring.escape(value)}`\n  ).join('&');\n}\n\n/**\n * Verify that the parameter `value` is defined and it's string value is not zero.\n * <br>This function should not be confused with `isEmpty()`.\n * @private\n * @param {string|number} value The value to check.\n * @return {boolean} True if the value is defined and not empty.\n */\n\nfunction present(value) {\n  return value != null && (\"\" + value).length > 0;\n}\n\n/**\n * Returns a new object with key values from source based on the keys.\n * `null` or `undefined` values are not copied.\n * @private\n * @param {object} source The object to pick values from.\n * @param {...string} keys One or more keys to copy from source.\n * @return {object} A new object with the required keys and values.\n */\n\nfunction pickOnlyExistingValues(source, ...keys) {\n  let result = {};\n  if (source) {\n    keys.forEach((key) => {\n      if (source[key] != null) {\n        result[key] = source[key];\n      }\n    });\n  }\n  return result;\n}\n\n/**\n * Returns a JSON array as String.\n * Yields the array before it is converted to JSON format\n * @private\n * @param {object|String|Array<object>} data\n * @param {function(*):*} [modifier] called with the array before the array is stringified\n * @return {String|null} a JSON array string or `null` if data is `null`\n */\n\nfunction jsonArrayParam(data, modifier) {\n  if (!data) {\n    return null;\n  }\n  if (isString(data)) {\n    data = JSON.parse(data);\n  }\n  if (!isArray(data)) {\n    data = [data];\n  }\n  if (isFunction(modifier)) {\n    data = modifier(data);\n  }\n  return JSON.stringify(data);\n}\n\nfunction optionalRequire(moduleName) {\n  let module;\n  try {\n    module = require(moduleName)\n    return module;\n  } catch (e) {\n    if (e.code === \"MODULE_NOT_FOUND\") {\n      return null;\n    }\n    throw e;\n  }\n}\n\n/**\n * Empty function - do nothing\n *\n */\nexports.NOP = function () {};\nexports.generate_auth_token = generate_auth_token;\nexports.getUserAgent = getUserAgent;\nexports.build_upload_params = build_upload_params;\nexports.build_multi_and_sprite_params = build_multi_and_sprite_params;\nexports.api_download_url = api_download_url;\nexports.timestamp = () => Math.floor(new Date().getTime() / 1000);\nexports.option_consume = consumeOption; // for backwards compatibility\nexports.build_array = toArray; // for backwards compatibility\nexports.encode_double_array = encodeDoubleArray;\nexports.encode_key_value = encode_key_value;\nexports.encode_context = encode_context;\nexports.build_eager = build_eager;\nexports.build_custom_headers = build_custom_headers;\nexports.generate_transformation_string = generate_transformation_string;\nexports.updateable_resource_params = updateable_resource_params;\nexports.extractUrlParams = extractUrlParams;\nexports.extractTransformationParams = extractTransformationParams;\nexports.patchFetchFormat = patchFetchFormat;\nexports.url = url;\nexports.video_url = video_url;\nexports.video_thumbnail_url = video_thumbnail_url;\nexports.api_url = api_url;\nexports.random_public_id = random_public_id;\nexports.signed_preloaded_image = signed_preloaded_image;\nexports.api_sign_request = api_sign_request;\nexports.clear_blank = clear_blank;\nexports.merge = merge;\nexports.sign_request = sign_request;\nexports.webhook_signature = webhook_signature;\nexports.verifyNotificationSignature = verifyNotificationSignature;\nexports.process_request_params = process_request_params;\nexports.private_download_url = private_download_url;\nexports.zip_download_url = zip_download_url;\nexports.download_archive_url = download_archive_url;\nexports.download_zip_url = download_zip_url;\nexports.cloudinary_js_config = cloudinary_js_config;\nexports.v1_adapters = v1_adapters;\nexports.as_safe_bool = as_safe_bool;\nexports.archive_params = archive_params;\nexports.build_explicit_api_params = build_explicit_api_params;\nexports.generate_responsive_breakpoints_string = generate_responsive_breakpoints_string;\nexports.build_streaming_profiles_param = build_streaming_profiles_param;\nexports.hashToParameters = hashToParameters;\nexports.present = present;\nexports.only = pickOnlyExistingValues; // for backwards compatibility\nexports.pickOnlyExistingValues = pickOnlyExistingValues;\nexports.jsonArrayParam = jsonArrayParam;\nexports.download_folder = download_folder;\nexports.base_api_url = base_api_url;\nexports.download_backedup_asset = download_backedup_asset;\nexports.optionalRequire = optionalRequire;\n\n// was exported before, so kept for backwards compatibility\nexports.DEFAULT_POSTER_OPTIONS = DEFAULT_POSTER_OPTIONS;\nexports.DEFAULT_VIDEO_SOURCE_TYPES = DEFAULT_VIDEO_SOURCE_TYPES;\n\nObject.assign(module.exports, {\n  normalize_expression,\n  at,\n  clone,\n  extend,\n  filter,\n  includes,\n  isArray,\n  isEmpty,\n  isNumber,\n  isObject,\n  isRemoteUrl,\n  isString,\n  isUndefined,\n  keys: source => Object.keys(source),\n  ensurePresenceOf\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}